[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The openxlsx2 book",
    "section": "",
    "text": "Preface\nThis is a work in progress book describing the features of openxlsx2 (Barbone and Garbuszus 2024). Having written a book before, I never imagined to do this again and therefore I shall not do it. But still I consider it a nice addition to have something more flexible as our vignettes.\nThis manual was compiled using:\nR.version\n\n               _                           \nplatform       x86_64-pc-linux-gnu         \narch           x86_64                      \nos             linux-gnu                   \nsystem         x86_64, linux-gnu           \nstatus                                     \nmajor          4                           \nminor          4.1                         \nyear           2024                        \nmonth          06                          \nday            14                          \nsvn rev        86737                       \nlanguage       R                           \nversion.string R version 4.4.1 (2024-06-14)\nnickname       Race for Your Life\nand\npackageVersion(\"openxlsx2\")\n\n[1] '1.9.0.9000'\nGraphics might reflect earlier states and are not constantly updated. If you find any irregularities where our code produces different output than expected, please let us know in the issue tracker at https://github.com/JanMarvin/openxlsx2/.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#additional-examples",
    "href": "index.html#additional-examples",
    "title": "The openxlsx2 book",
    "section": "Additional examples",
    "text": "Additional examples\nFor many more examples of what openxlsx2 can do, have a look at the Show and tell section of the openxlsx2 discussion board: https://github.com/JanMarvin/openxlsx2/discussions/categories/show-and-tell",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#where-to-get-help",
    "href": "index.html#where-to-get-help",
    "title": "The openxlsx2 book",
    "section": "Where to get help",
    "text": "Where to get help\nFor all things openxlsx2 consult our discussion board at https://github.com/JanMarvin/openxlsx2/discussions/categories/q-a\n\n\n\n\nBarbone, Jordan Mark, and Jan Marvin Garbuszus. 2024. Openxlsx2: Read, Write and Edit ’Xlsx’ Files. https://janmarvin.github.io/openxlsx2/.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html",
    "href": "chapters/01_introduction.html",
    "title": "\n1  Introduction\n",
    "section": "",
    "text": "1.1 Installation\nYou can install the stable version of openxlsx2 with:\nYou can install the development version of openxlsx2 from GitHub with:\nOr from r-universe with:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#installation",
    "href": "chapters/01_introduction.html#installation",
    "title": "\n1  Introduction\n",
    "section": "",
    "text": "install.packages('openxlsx2')\n\n# install.packages(\"remotes\")\nremotes::install_github(\"JanMarvin/openxlsx2\")\n\n# Enable repository from janmarvin\noptions(repos = c(\n  janmarvin = 'https://janmarvin.r-universe.dev',\n  CRAN = 'https://cloud.r-project.org'))\n# Download and install openxlsx2 in R\ninstall.packages('openxlsx2')",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#working-with-the-package",
    "href": "chapters/01_introduction.html#working-with-the-package",
    "title": "\n1  Introduction\n",
    "section": "\n1.2 Working with the package",
    "text": "1.2 Working with the package\nWe offer two different variants how to work with openxlsx2.\n\nThe first one is to simply work with R objects. It is possible to read (read_xlsx() and write (write_xlsx()) data from and to files. We offer a number of options in the commands to support various features of the openxml format, including reading and writing named ranges and tables. Furthermore, there are several ways to read certain information of an openxml spreadsheet without having opened it in a spreadsheet software before, e.g. to get the contained sheet names or tables.\nAs a second variant openxlsx2 offers the work with so called wbWorkbook objects. Here an openxml file is read into a corresponding wbWorkbook object (wb_load()) or a new one is created (wb_workbook()). Afterwards the object can be further modified using various functions. For example, worksheets can be added or removed, the layout of cells or entire worksheets can be changed, and cells can be modified (overwritten or rewritten). Afterwards the wbWorkbook objects can be written as openxml files and processed by suitable spreadsheet software.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#example",
    "href": "chapters/01_introduction.html#example",
    "title": "\n1  Introduction\n",
    "section": "\n1.3 Example",
    "text": "1.3 Example\nThis is a basic example which shows you how to solve a common problem:\n\nlibrary(openxlsx2)\n# read xlsx or xlsm files\npath &lt;- system.file(\"extdata/openxlsx2_example.xlsx\", package = \"openxlsx2\")\nread_xlsx(path)\n\n    Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n# or import workbooks\nwb &lt;- wb_load(path)\nwb\n\nA Workbook object.\n \nWorksheets:\n Sheets: Sheet1, Sheet2 \n Write order: 1, 2\n\n# read a data frame\nwb_to_df(wb)\n\n    Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n# and save\ntemp &lt;- temp_xlsx()\nif (interactive()) wb_save(wb, temp)\n\n## or create one yourself\nwb &lt;- wb_workbook()\n# add a worksheet\nwb$add_worksheet(\"sheet\")\n# add some data\nwb$add_data(\"sheet\", cars)\n# open it in your default spreadsheet software\nif (interactive()) wb$open()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#authors-and-contributions",
    "href": "chapters/01_introduction.html#authors-and-contributions",
    "title": "\n1  Introduction\n",
    "section": "\n1.4 Authors and contributions",
    "text": "1.4 Authors and contributions\nFor a full list of all authors that have made this package possible and for whom we are grateful, please see:\nsystem.file(\"AUTHORS\", package = \"openxlsx2\")\nIf you feel like you should be included on this list, please let us know. If you have something to contribute, you are welcome. If something is not working as expected, open issues or if you have solved an issue, open a pull request. Please be respectful and be aware that we are volunteers doing this for fun in our unpaid free time. We will work on problems when we have time or need.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#license",
    "href": "chapters/01_introduction.html#license",
    "title": "\n1  Introduction\n",
    "section": "\n1.5 License",
    "text": "1.5 License\nThe openxlsx2 package is licensed under the MIT license and is based on openxlsx (by Alexander Walker and Philipp Schauberger; COPYRIGHT 2014-2022) and pugixml (by Arseny Kapoulkine; COPYRIGHT 2006-2023). Both released under the MIT license.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#a-note-on-speed-and-memory-usage",
    "href": "chapters/01_introduction.html#a-note-on-speed-and-memory-usage",
    "title": "\n1  Introduction\n",
    "section": "\n1.6 A note on speed and memory usage",
    "text": "1.6 A note on speed and memory usage\nThe current state of openxlsx2 is that it is reasonably fast. That is, it works well with reasonably large input data when reading or writing. It may not work well with data that tests the limits of the openxml specification. Things may slow down on the R side of things, and performance and usability will depend on the speed and size of the local operating system’s CPU and memory.\nNote that there are at least two cases where openxlsx2 constructs potentially large data frames (i) when loading, openxlsx2 usually needs to read the entire input file into pugixml and convert it into long data frame(s), and wb_to_df() converts one long data frame into two data frames that construct the output object and (ii) when adding data to the workbook, openxlsx2 reshapes the input data frame into a long data frame and stores it in the workbook, and writes the entire worksheet into a pugixml file that is written when it is complete. Applying cell styles, date conversions etc. will further slow down the process and finally the sheets will be zipped to provide the xlsx output.\nTherefore, if you are faced with an unreasonably large dataset, either give yourself enough time, use another package to write the xlsx output (openxlsx2 was not written with the intention of working with maximum memory efficiency), and by all means use other ways to store data (binary file formats or a database). However, we are always happy to improve, so if you have found a way to improve what we are currently doing, please let us know and open an issue or a pull request.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#invitation-to-contribute",
    "href": "chapters/01_introduction.html#invitation-to-contribute",
    "title": "\n1  Introduction\n",
    "section": "\n1.7 Invitation to contribute",
    "text": "1.7 Invitation to contribute\nWe have put a lot of work into openxls2 to make it useful for our needs, improving what we found useful about openxlsx and removing what we didn’t need. We do not claim to be omniscient about all the things you can do with spreadsheet software, nor do we claim to be omniscient about all the things you can do in openxlsx2. Nevertheless, we are quite fond of our little package and invite others to try it out and comment on what they like and of course what they think we are missing or if something doesn’t work. openxlsx2 is a complex piece of software that certainly does not work bug-free, even if we did our best. If you want to contribute to the development of openxlsx2, please be our guest on our Github. Join or open a discussion, post or fix issues or write us a mail.\n\n\n\n\nAllen, Michael. 2023. Readxlsb: Read ’Excel’ Binary (.xlsb) Workbooks. https://CRAN.R-project.org/package=readxlsb.\n\n\nBarbone, Jordan Mark, and Jan Marvin Garbuszus. 2024. Openxlsx2: Read, Write and Edit ’Xlsx’ Files. https://janmarvin.github.io/openxlsx2/.\n\n\nChang, Winston. 2021. R6: Encapsulated Classes with Reference Semantics. https://CRAN.R-project.org/package=R6.\n\n\nDragulescu, Adrian, and Cole Arendt. 2023. Xlsx: Read, Write, Format Excel 2007 and Excel 97/2000/XP/2003 Files. https://CRAN.R-project.org/package=xlsx.\n\n\nEddelbuettel, Dirk, and Romain François. 2011. “Rcpp: Seamless R and C++ Integration.” Journal of Statistical Software 40 (8): 1–18. https://doi.org/10.18637/jss.v040.i08.\n\n\nGarmonsway, Duncan. 2022. Tidyxl: Read Untidy Excel Files. https://CRAN.R-project.org/package=tidyxl.\n\n\nKapoulkine, Arseny. 2006-2023. Pugixml. https://pugixml.org.\n\n\nOoms, Jeroen. 2023. Writexl: Export Data Frames to Excel ’Xlsx’ Format. https://CRAN.R-project.org/package=writexl.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. Openxlsx: Read, Write and Edit Xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchwartz, Marc. 2022. WriteXLS: Cross-Platform Perl Based r Function to Create Excel 2003 (XLS) and Excel 2007 (XLSX) Files. https://CRAN.R-project.org/package=WriteXLS.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. Readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/01_introduction.html#footnotes",
    "href": "chapters/01_introduction.html#footnotes",
    "title": "\n1  Introduction\n",
    "section": "",
    "text": "See https://github.com/omegahat/RDCOMClient.↩︎\nSee https://wikipedia.org/wiki/Office_Open_XML.↩︎\nWith ‘semi-stable’ we promise not to break the API unless we come across a bug that forces us to. All breaking changes are mentioned in the changelog.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_basic_manual.html",
    "href": "chapters/openxlsx2_basic_manual.html",
    "title": "\n2  Basics\n",
    "section": "",
    "text": "2.1 Importing data\nComing from openxlsx you might know about read.xlsx() (two functions, one for files and one for workbooks) and readWorkbook(). Functions that do different things, but mostly the same. In openxlsx2 we tried our best to reduce the complexity under the hood and for the user as well. In openxlsx2 they are replaced with read_xlsx(), wb_read() and they share the same underlying function wb_to_df().\nFor this example we will use example data provided by the package. You can locate it in our “inst/extdata” folder. The files are included with the package source and you can open them in any calculation software as well.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_basic_manual.html#importing-data",
    "href": "chapters/openxlsx2_basic_manual.html#importing-data",
    "title": "\n2  Basics\n",
    "section": "",
    "text": "2.1.1 Basic import\nWe begin with the openxlsx2_example.xlsx file by telling R where to find this file on our system\n\nxlsxFile &lt;- system.file(\"extdata\", \"openxlsx2_example.xlsx\", package = \"openxlsx2\")\n\nThe object contains a path to the xlsx file and we pass this file to our function to read the workbook into R\n\n# import workbook\nwb_to_df(xlsxFile)\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\nThe output is created as a data frame and contains data types date, logical, numeric and character. The function to import the file to R, wb_to_df() provides similar options as the openxlsx functions read.xlsx() and readWorkbook() and a few new functions we will go through the options. As you might have noticed, we return the column of the xlsx file as the row name of the data frame returned. Per default the first sheet in the workbook is imported. If you want to switch this, either provide the sheet parameter with the correct index or provide the sheet name.\n\n2.1.2 col_names - first row as column name\nIn the previous example the first imported row was used as column name for the data frame. This is the default behavior, but not always wanted or expected. Therefore this behavior can be disabled by the user.\n\n# do not convert first row to column names\nwb_to_df(xlsxFile, col_names = FALSE)\n#&gt;        B    C  D     E     F          G            H       I        J\n#&gt; 2   Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE &lt;NA&gt; NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9   &lt;NA&gt; &lt;NA&gt; NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12  &lt;NA&gt;    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n2.1.3 detect_dates - convert cells to R dates\nThe creators of the openxml standard are well known for mistakenly treating something as a date and openxlsx2 has built in ways to identify a cell as a date and will try to convert the value for you, but unfortunately this is not always a trivial task and might fail. In such a case we provide an option to disable the date conversion entirely. In this case the underlying numerical value will be returned.\n\n# do not try to identify dates in the data\nwb_to_df(xlsxFile, detect_dates = FALSE)\n#&gt;     Var1 Var2 NA  Var3  Var4  Var5         Var6    Var7       Var8\n#&gt; 3   TRUE    1 NA     1     a 45075 3209324 This #DIV/0! 0.06059028\n#&gt; 4   TRUE   NA NA #NUM!     b 45069         &lt;NA&gt;       0 0.58538194\n#&gt; 5   TRUE    2 NA  1.34     c 44958         &lt;NA&gt; #VALUE! 0.95905093\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!    NA         &lt;NA&gt;       2 0.72561343\n#&gt; 7  FALSE    3 NA  1.56     e    NA         &lt;NA&gt;    &lt;NA&gt;         NA\n#&gt; 8  FALSE    1 NA   1.7     f 44987         &lt;NA&gt;     2.7 0.36525463\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;    NA         &lt;NA&gt;    &lt;NA&gt;         NA\n#&gt; 10 FALSE    2 NA    23     h 45284         &lt;NA&gt;      25         NA\n#&gt; 11 FALSE    3 NA  67.3     i 45285         &lt;NA&gt;       3         NA\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 45138         &lt;NA&gt;     122         NA\n\n\n2.1.4 show_formula - show formulas instead of results\nSometimes things might feel off. This can be because the openxml files are not updating formula results in the sheets unless they are opened in software that provides such functionality as certain tabular calculation software. Therefore the user might be interested in the underlying functions to see what is going on in the sheet. Using show_formula this is possible\n\n# return the underlying Excel formula instead of their values\nwb_to_df(xlsxFile, show_formula = TRUE)\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6            Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This            E3/0 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;              C4 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt;         #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;           C6+E6 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;           C8+E8 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;    SUM(C10,E10)     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt; PRODUCT(C11,E3)     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;         E12-C12     &lt;NA&gt;\n\n\n2.1.5 dims - read specific dimension\nSometimes the entire worksheet contains to much data, in such case we provide functions to read only a selected dimension range. Such a range consists of either a specific cell like “A1” or a cell range in the notion used in the openxml standard\n\n# read dimension without column names\nwb_to_df(xlsxFile, dims = \"A2:C5\", col_names = FALSE)\n#&gt;    A    B    C\n#&gt; 2 NA Var1 Var2\n#&gt; 3 NA TRUE    1\n#&gt; 4 NA TRUE &lt;NA&gt;\n#&gt; 5 NA TRUE    2\n\nAlternatively, if you don’t know the Excel sheet’s address, you can use wb_dims() to specify the dimension. See below or in?wb_dims for more details.\n\n# read dimension without column names with `wb_dims()`\nwb_to_df(xlsxFile, dims = wb_dims(rows = 2:5, cols = 1:3), col_names = FALSE)\n#&gt;    A    B    C\n#&gt; 2 NA Var1 Var2\n#&gt; 3 NA TRUE    1\n#&gt; 4 NA TRUE &lt;NA&gt;\n#&gt; 5 NA TRUE    2\n\n\n2.1.6 cols - read selected columns\nIf you do not want to read a specific cell, but a cell range you can use the column attribute. This attribute takes a numeric vector as argument\n\n# read selected cols\nwb_to_df(xlsxFile, cols = c(\"A:B\", \"G\"))\n#&gt;    NA  Var1       Var5\n#&gt; 3  NA  TRUE 2023-05-29\n#&gt; 4  NA  TRUE 2023-05-23\n#&gt; 5  NA  TRUE 2023-02-01\n#&gt; 6  NA FALSE       &lt;NA&gt;\n#&gt; 7  NA FALSE       &lt;NA&gt;\n#&gt; 8  NA FALSE 2023-03-02\n#&gt; 9  NA    NA       &lt;NA&gt;\n#&gt; 10 NA FALSE 2023-12-24\n#&gt; 11 NA FALSE 2023-12-25\n#&gt; 12 NA    NA 2023-07-31\n\n\n2.1.7 rows - read selected rows\nThe same goes with rows. You can select them using numeric vectors\n\n# read selected rows\nwb_to_df(xlsxFile, rows = c(2, 4, 6))\n#&gt;    Var1 Var2 NA  Var3  Var4       Var5 Var6 Var7     Var8\n#&gt; 4  TRUE   NA NA #NUM!     b 2023-05-23   NA    0 14:02:57\n#&gt; 6 FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;   NA    2 17:24:53\n\n\n2.1.8 convert - convert input to guessed type\nIn xml exists no difference between value types. All values are per default characters. To provide these as numerics, logicals or dates, openxlsx2 and every other software dealing with xlsx files has to make assumptions about the cell type. This is especially tricky due to the notion of worksheets. Unlike in a data frame, a worksheet can have a wild mix of all types of data. Even though the conversion process from character to date or numeric is rather solid, sometimes the user might want to see the data without any conversion applied. This might be useful in cases where something unexpected happened or the import created warnings. In such a case you can look at the raw input data. If you want to disable date detection as well, please see the entry above.\n\n# convert characters to numerics and date (logical too?)\nwb_to_df(xlsxFile, convert = FALSE)\n#&gt;     Var1 Var2   NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 &lt;NA&gt;     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE &lt;NA&gt; &lt;NA&gt; #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 &lt;NA&gt;  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 &lt;NA&gt;  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 &lt;NA&gt;  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 &lt;NA&gt;   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9   &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 &lt;NA&gt;    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 &lt;NA&gt;  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12  &lt;NA&gt;    1 &lt;NA&gt;   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n2.1.9 skip_empty_rows - remove empty rows\nEven though openxlsx2 imports everything as requested, sometimes it might be helpful to remove empty lines from the data. These might be either left empty intentional or empty because they are were formatted, but the cell value was removed afterwards. This was added mostly for backward comparability, but the default has been changed to FALSE. The behavior has changed a bit as well. Previously empty cells were removed prior to the conversion to R data frames, now they are removed after the conversion and are removed only if they are completely empty\n\n# erase empty rows from dataset\nwb_to_df(xlsxFile, sheet = 1, skip_empty_rows = TRUE) |&gt; tail()\n#&gt;     Var1 Var2 NA Var3  Var4       Var5 Var6 Var7     Var8\n#&gt; 6  FALSE    2 NA &lt;NA&gt; #NUM!       &lt;NA&gt; &lt;NA&gt;    2 17:24:53\n#&gt; 7  FALSE    3 NA 1.56     e       &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA  1.7     f 2023-03-02 &lt;NA&gt;  2.7 08:45:58\n#&gt; 10 FALSE    2 NA   23     h 2023-12-24 &lt;NA&gt;   25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA 67.3     i 2023-12-25 &lt;NA&gt;    3     &lt;NA&gt;\n#&gt; 12    NA    1 NA  123  &lt;NA&gt; 2023-07-31 &lt;NA&gt;  122     &lt;NA&gt;\n\n\n2.1.10 skip_empty_cols - remove empty columns\nThe same for columns\n\n# erase empty columns from dataset\nwb_to_df(xlsxFile, skip_empty_cols = TRUE)\n#&gt;     Var1 Var2  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n2.1.11 row_names - keep rownames from input\nSometimes the data source might provide rownames as well. In such a case you can openxlsx2 to treat the first column as rowname\n\n# convert first row to rownames\nwb_to_df(xlsxFile, sheet = 2, dims = \"C6:G9\", row_names = TRUE)\n#&gt;                mpg cyl disp  hp\n#&gt; Mazda RX4     21.0   6  160 110\n#&gt; Mazda RX4 Wag 21.0   6  160 110\n#&gt; Datsun 710    22.8   4  108  93\n\n\n2.1.12 types - convert column to specific type\nIf the user know better than the software what type to expect in a worksheet, this can be provided via types. This parameter takes a named numeric. 0 is character, 1 is numeric and 2 is date\n\n# define type of the data.frame\nwb_to_df(xlsxFile, cols = c(2, 5), types = c(\"Var1\" = 0, \"Var3\" = 1))\n#&gt;     Var1   Var3\n#&gt; 3   TRUE   1.00\n#&gt; 4   TRUE    NaN\n#&gt; 5   TRUE   1.34\n#&gt; 6  FALSE     NA\n#&gt; 7  FALSE   1.56\n#&gt; 8  FALSE   1.70\n#&gt; 9   &lt;NA&gt;     NA\n#&gt; 10 FALSE  23.00\n#&gt; 11 FALSE  67.30\n#&gt; 12  &lt;NA&gt; 123.00\n\n\n2.1.13 start_row - where to begin\nOften the creator of the worksheet has used a lot of creativity and the data does not begin in the first row, instead it begins somewhere else. To define the row where to begin reading, define it via the start_row parameter\n\n# start in row 5\nwb_to_df(xlsxFile, start_row = 5, col_names = FALSE)\n#&gt;        B  C  D      E     F          G  H       I        J\n#&gt; 5   TRUE  2 NA   1.34     c 2023-02-01 NA #VALUE! 23:01:02\n#&gt; 6  FALSE  2 NA     NA #NUM!       &lt;NA&gt; NA       2 17:24:53\n#&gt; 7  FALSE  3 NA   1.56     e       &lt;NA&gt; NA    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE  1 NA   1.70     f 2023-03-02 NA     2.7 08:45:58\n#&gt; 9     NA NA NA     NA  &lt;NA&gt;       &lt;NA&gt; NA    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE  2 NA  23.00     h 2023-12-24 NA      25     &lt;NA&gt;\n#&gt; 11 FALSE  3 NA  67.30     i 2023-12-25 NA       3     &lt;NA&gt;\n#&gt; 12    NA  1 NA 123.00  &lt;NA&gt; 2023-07-31 NA     122     &lt;NA&gt;\n\n\n2.1.14 na.strings - define missing values\nThere is the “#N/A” string, but often the user will be faced with custom missing values and other values we are not interested. Such strings can be passed as character vector via na.strings\n\n# na strings\nwb_to_df(xlsxFile, na.strings = \"\")\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n2.1.15 Importing as workbook\nIn addition to importing directly from xlsx or xlsm files, openxlsx2 provides the wbWorkbook class used for importing and modifying entire the openxml files in R. This workbook class is the heart of openxlsx2 and probably the reason why you are reading this manual in the first place.\nImporting a file into a workbook looks like this:\n\n# the file we are going to load\nxlsxFile &lt;- system.file(\"extdata\", \"openxlsx2_example.xlsx\", package = \"openxlsx2\")\n# loading the file into the workbook\nwb &lt;- wb_load(file = xlsxFile)\n\nThe additional options wb_load() provides are for internal use: sheet loads only a selected sheet from the workbook and data_only reads only the data parts from a workbook and ignores any additional graphics or pivot tables. Both functions create workbook objects that can only be used to read data, and we do not recommend end users to use them. Especially not if they intend to re-export the workbook afterwards.\nOnce a workbook is imported, we provide several functions to interact with and modify it (the wb_to_df() function mentioned above works the same way for an imported workbook). It is possible to add new sheets and remove sheets, as well as to add or remove data. R-plots can be inserted and also the style of the workbook can be changed, new fonts, background colors and number formats. There is a wealth of options explained in the man pages and the additional style vignette (more vignettes to follow).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_basic_manual.html#exporting-data",
    "href": "chapters/openxlsx2_basic_manual.html#exporting-data",
    "title": "\n2  Basics\n",
    "section": "\n2.2 Exporting data",
    "text": "2.2 Exporting data\n\n2.2.1 Exporting data frames or vectors\nIf you want to export a data frame from R, you can use write_xlsx() which will create an xlsx file. This file can be tweaked further. See ?openxlsx2::write_xlsx to see all the options. (Further explanation and examples will follow).\n\nwrite_xlsx(x = mtcars, file = \"mtcars.xlsx\")\n\n\n2.2.2 Exporting a wbWorkbook\n\nImported workbooks can be saved as xlsx or xlsm files with the wrapper wb_save() or with wb$save(). Both functions take the filename and an optional overwrite option. If the latter is set, an optional guard is provided to check if the file you want to write already exists. But be careful, this is optional. The default is to save the file and replace an existing file. Of course, on Windows, files that are locked (for example, if they were opened by another process) will not be replaced.\n\n# replace the existing file\nwb$save(\"mtcars.xlsx\")\n\n# do not overwrite the existing file\ntry(wb$save(\"mtcars.xlsx\", overwrite = FALSE))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_basic_manual.html#dims-wb_dims",
    "href": "chapters/openxlsx2_basic_manual.html#dims-wb_dims",
    "title": "\n2  Basics\n",
    "section": "\n2.3 dims/ wb_dims()\n",
    "text": "2.3 dims/ wb_dims()\n\nIn openxlsx2 functions that interact with worksheet cells are using dims as argument and require the users to provide these. dims are cells or cell ranges in A1 notation. The single argument dims hereby replaces col/row, cols/rows and xy. Since A1 notation is rather simple in the first few columns it might get confusing after the 26. Therefore we provide a wrapper to construct it:\n\n# various options\nwb_dims(from_row = 4)\n#&gt; [1] \"A4\"\n\nwb_dims(rows = 4, cols = 4)\n#&gt; [1] \"D4\"\nwb_dims(rows = 4, cols = \"D\")\n#&gt; [1] \"D4\"\n\nwb_dims(rows = 4:10, cols = 5:9)\n#&gt; [1] \"E4:I10\"\n\nwb_dims(rows = 4:10, cols = \"A:D\") # same as below\n#&gt; [1] \"A4:D10\"\nwb_dims(rows = seq_len(7), cols = seq_len(4), from_row = 4)\n#&gt; [1] \"A4:D10\"\n# 10 rows and 15 columns from indice B2.\nwb_dims(rows = 1:10, cols = 1:15, from_col = \"B\", from_row = 2)\n#&gt; [1] \"B2:P11\"\n\n# data + col names\nwb_dims(x = mtcars)\n#&gt; [1] \"A1:K33\"\n# only data\nwb_dims(x = mtcars, select = \"data\")\n#&gt; [1] \"A2:K33\"\n\n# The dims of the values of a column in `x`\nwb_dims(x = mtcars, cols = \"cyl\")\n#&gt; [1] \"B2:B33\"\n# a column in `x` with the column name\nwb_dims(x = mtcars, cols = \"cyl\", select = \"x\")\n#&gt; [1] \"B1:B33\"\n# rows in `x`\nwb_dims(x = mtcars)\n#&gt; [1] \"A1:K33\"\n\n# in a wb chain\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = mtcars)$\n  add_fill(\n    dims = wb_dims(x = mtcars, rows = 1:5), # only 1st 5 rows of x data\n    color = wb_color(\"yellow\")\n  )$\n  add_fill(\n    dims = wb_dims(x = mtcars, select = \"col_names\"), # only column names\n    color = wb_color(\"cyan2\")\n  )\n\n# or if the data's first coord needs to be located in B2.\n\nwb_dims_custom &lt;- function(...) {\n  wb_dims(x = mtcars, from_col = \"B\", from_row = 2, ...)\n}\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = mtcars, dims = wb_dims_custom())$\n  add_fill(\n    dims = wb_dims_custom(rows = 1:5),\n    color = wb_color(\"yellow\")\n  )$\n  add_fill(\n    dims = wb_dims_custom(select = \"col_names\"),\n    color = wb_color(\"cyan2\")\n  )",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_number_and_string.html",
    "href": "chapters/openxlsx2_number_and_string.html",
    "title": "\n3  Of strings and numbers\n",
    "section": "",
    "text": "3.1 Default numeric data frame\nUsing a few rows of the cars data frame we show how to write numerics. The strings are left aligned and the numbers right aligned.\n# default data frame\ndat &lt;- data.frame(\n  speed = c(4, 4, 7, 7, 8, 9),\n  dist = c(2, 10, 4, 22, 16, 10)\n)\n\n# Consisting only of numerics\nstr(dat)\n#&gt; 'data.frame':    6 obs. of  2 variables:\n#&gt;  $ speed: num  4 4 7 7 8 9\n#&gt;  $ dist : num  2 10 4 22 16 10\n\nwb$add_worksheet(\"dat\")$add_data(x = dat)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Of strings and numbers</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_number_and_string.html#data-frame-with-multiple-row-header",
    "href": "chapters/openxlsx2_number_and_string.html#data-frame-with-multiple-row-header",
    "title": "\n3  Of strings and numbers\n",
    "section": "\n3.2 Data frame with multiple row header",
    "text": "3.2 Data frame with multiple row header\nNow we alter the data frame with a second row adding the column label. Since R does not know mixed column types the entire data frame is converted to characters.\n\n# add subtitle to the data\ndat_w_subtitle &lt;- data.frame(\n  speed = c(\"Speed (mph)\", 4, 4, 7, 7, 8, 9),\n  dis = c(\"Stopping distance (ft)\", 2, 10, 4, 22, 16, 10)\n)\n# Check that both columns are character\nstr(dat_w_subtitle)\n#&gt; 'data.frame':    7 obs. of  2 variables:\n#&gt;  $ speed: chr  \"Speed (mph)\" \"4\" \"4\" \"7\" ...\n#&gt;  $ dis  : chr  \"Stopping distance (ft)\" \"2\" \"10\" \"4\" ...\n\n# write data as is. this creates number stored as text error\n# this can be surpressed with: wb_add_ignore_error(number_stored_as_text)\nwb$add_worksheet(\"dat_w_subtitle\")$add_data(x = dat_w_subtitle)\n\nNow the data is written as strings. Therefore the numbers are not written as 4, but as \"4\". In the openxml format characters are treated differently as numbers and are stored as inline strings (openxlsx2 default) or as shared string. The file loads fine, but now all cells are right alligned and the previous numeric cells are all showing the number stored as text error. Spreadsheet software will treat these cells independently of the data type, so it does not matter other that the error is thrown and that number formats are not applied.\nSince conversions to character are sometimes not wanted, we provide a way to detect these numbers stored as text and will convert them when the data is written into the workbook.\n\n# write character string, but write string numbers as numerics\noptions(\"openxlsx2.string_nums\" = TRUE)\nwb$add_worksheet(\"string_nums\")$add_data(x = dat_w_subtitle)\noptions(\"openxlsx2.string_nums\" = NULL)\n\nThis way the data is written as numerics, but still right aligned. This is due to the cell style, otherwise it looks entirely identical to previous attemt. Since this conversion is not generally wanted this option needs to be enabled explicitly. Gernally openxlsx2 assumes that the users are mature and want what they request.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Of strings and numbers</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_number_and_string.html#how-to-write-multiple-header-rows",
    "href": "chapters/openxlsx2_number_and_string.html#how-to-write-multiple-header-rows",
    "title": "\n3  Of strings and numbers\n",
    "section": "\n3.3 How to write multiple header rows?",
    "text": "3.3 How to write multiple header rows?\nThe better approach to avoid the entire conversion is to write the column headers and the column data separately. The recommended approach to this would be something like this:\n\nwb$add_worksheet(\"characters and numbers\")$\n  add_data(x = dat_w_subtitle[1, ])$\n  add_data(dims = wb_dims(x = dat, col_names = FALSE, from_row = 3),\n           x = dat, col_names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Of strings and numbers</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_number_and_string.html#labelled-data",
    "href": "chapters/openxlsx2_number_and_string.html#labelled-data",
    "title": "\n3  Of strings and numbers\n",
    "section": "\n3.4 Labelled data",
    "text": "3.4 Labelled data\nIn addition to pure numbers and characters it is also possible to write labelled vectors such as factors or columns modified with the labelled package.\n\n# Factors\nx &lt;- c(\"Man\", \"Male\", \"Man\", \"Lady\", \"Female\")\nxf &lt;- factor(x, levels = c(\"Male\", \"Man\" , \"Lady\",   \"Female\"),\n             labels = c(\"Male\", \"Male\", \"Female\", \"Female\"))\n\nwb$add_worksheet(\"factors\")$add_data(x = data.frame(x, xf))\n\n# Labelled\nv &lt;- labelled::labelled(\n  c(1, 2, 2, 2, 3, 9, 1, 3, 2, NA),\n  c(yes = 1, no = 3, \"don't know\" = 8, refused = 9)\n)\n\nwb$add_worksheet(\"labelled\")$add_data(x = v)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Of strings and numbers</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_number_and_string.html#hour---minute---second",
    "href": "chapters/openxlsx2_number_and_string.html#hour---minute---second",
    "title": "\n3  Of strings and numbers\n",
    "section": "\n3.5 Hour - Minute - Second",
    "text": "3.5 Hour - Minute - Second\nIf the hms package is loaded openxlsx2 makes use of this as well. Otherwise the data would be returned as\n\nset.seed(123)\nwb$add_worksheet(\"hms\")$add_data(x = hms::hms(sample(1:100000, 5, TRUE)))\n\ndf &lt;- wb_to_df(wb, sheet = \"hms\")\nstr(df)\n#&gt; 'data.frame':    5 obs. of  1 variable:\n#&gt;  $ x: 'hms' num  14:21:03 16:04:30 00:49:46 08:18:45 ...\n\n\nunloadNamespace(\"hms\")\ndf &lt;- wb_to_df(wb, sheet = \"hms\")\nstr(df)\n#&gt; 'data.frame':    5 obs. of  1 variable:\n#&gt;  $ x: chr  \"14:21:03\" \"16:04:30\" \"00:49:46\" \"08:18:45\" ...",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Of strings and numbers</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html",
    "href": "chapters/openxlsx2_style_manual.html",
    "title": "\n4  Styling of worksheets\n",
    "section": "",
    "text": "4.1 Colors, text rotation and number formats\nBelow we show you two ways how to create styled tables with openxlsx2 one using the high level functions to style worksheet areas and one using the bare metal approach of creating the identical table. We show both ways to create styles in openxlsx2 to show how you could build on our functions or create your very own functions.\nThe example below, with increased column width.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#colors-text-rotation-and-number-formats",
    "href": "chapters/openxlsx2_style_manual.html#colors-text-rotation-and-number-formats",
    "title": "\n4  Styling of worksheets\n",
    "section": "",
    "text": "4.1.1 the quick way: using high level functions\n\n# add some dummy data\nset.seed(123)\nmat &lt;- matrix(rnorm(28 * 28, mean = 44444, sd = 555), ncol = 28)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\nborder_col &lt;- wb_color(theme = 1)\nborder_sty &lt;- \"thin\"\n\n# prepare workbook with data and formated first row\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"test\") %&gt;%\n  wb_add_data(x = mat) %&gt;%\n  wb_add_border(dims = \"A1:AB1\",\n    top_color = border_col, top_border = border_sty,\n    bottom_color = border_col, bottom_border = border_sty,\n    left_color = border_col, left_border = border_sty,\n    right_color = border_col, right_border = border_sty,\n    inner_hcolor = border_col, inner_hgrid = border_sty\n  ) %&gt;%\n  wb_add_fill(dims = \"A1:AB1\", color = wb_color(hex = \"FF334E6F\")) %&gt;%\n  wb_add_font(dims = \"A1:AB1\", name = \"Arial\", bold = TRUE, color = wb_color(hex = \"FFFFFFFF\"), size = 20) %&gt;%\n  wb_add_cell_style(dims = \"A1:AB1\", horizontal = \"center\", text_rotation = 45)\n\n# create various number formats\nx &lt;- c(\n  0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  37, 38, 39, 40, 45, 46, 47, 48, 49\n)\n\n# apply the styles\nfor (i in seq_along(x)) {\n  cell &lt;- sprintf(\"%s2:%s29\", int2col(i), int2col(i))\n  wb &lt;- wb %&gt;% wb_add_numfmt(dims = cell, numfmt = x[i])\n}\n\n# wb$open()\n\n\n4.1.2 the long way: using bare metal functions\n\n# create workbook\nwb &lt;- wb_workbook() %&gt;% wb_add_worksheet(\"test\")\n\n# add some dummy data to the worksheet\nset.seed(123)\nmat &lt;- matrix(rnorm(28 * 28, mean = 44444, sd = 555), ncol = 28)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\nwb$add_data(x = mat, col_names = TRUE)\n\n# create a border style and assign it to the workbook\nblack &lt;- wb_color(hex = \"FF000000\")\nnew_border &lt;- create_border(\n  bottom = \"thin\", bottom_color = black,\n  top = \"thin\", top_color = black,\n  left = \"thin\", left_color = black,\n  right = \"thin\", right_color = black\n)\nwb$styles_mgr$add(new_border, \"new_border\")\n\n\n# create a fill style and assign it to the workbook\nnew_fill &lt;- create_fill(patternType = \"solid\", fgColor = wb_color(hex = \"FF334E6F\"))\nwb$styles_mgr$add(new_fill, \"new_fill\")\n\n# create a font style and assign it to the workbook\nnew_font &lt;- create_font(sz = 20, name = \"Arial\", b = TRUE, color = wb_color(hex = \"FFFFFFFF\"))\nwb$styles_mgr$add(new_font, \"new_font\")\n\n# create a new cell style, that uses the fill, the font and the border style\nnew_cellxfs &lt;- create_cell_style(\n  num_fmt_id    = 0,\n  horizontal    = \"center\",\n  text_rotation = 45,\n  fill_id       = wb$styles_mgr$get_fill_id(\"new_fill\"),\n  font_id       = wb$styles_mgr$get_font_id(\"new_font\"),\n  border_id     = wb$styles_mgr$get_border_id(\"new_border\")\n)\n# assign this style to the workbook\nwb$styles_mgr$add(new_cellxfs, \"new_styles\")\n\n# assign the new cell style to the header row of our data set\ncell &lt;- sprintf(\"A1:%s1\", int2col(nrow(mat)))\nwb &lt;- wb %&gt;% wb_set_cell_style(\n  dims = cell,\n  style = wb$styles_mgr$get_xf_id(\"new_styles\")\n)\n\n## style the cells with some builtin format codes (no new numFmt entry is needed)\n# add builtin style ids\nx &lt;- c(\n  1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  37, 38, 39, 40, 45, 46, 47, 48, 49\n)\n\n# create styles\nnew_cellxfs &lt;- create_cell_style(num_fmt_id = x, horizontal = \"center\")\n\n# assign the styles to the workbook\nfor (i in seq_along(x)) {\n  wb$styles_mgr$add(new_cellxfs[i], paste0(\"new_style\", i))\n}\n\n# new styles are 1:28\nnew_styles &lt;- wb$styles_mgr$get_xf()\nfor (i in as.integer(new_styles$id[new_styles$name %in% paste0(\"new_style\", seq_along(x))])) {\n  cell &lt;- sprintf(\"%s2:%s29\", int2col(i), int2col(i))\n  wb &lt;- wb %&gt;% wb_set_cell_style(dims = cell, style = i)\n}\n\n# assign a custom tabColor\nwb$worksheets[[1]]$sheetPr &lt;- xml_node_create(\n  \"sheetPr\",\n  xml_children = xml_node_create(\n    \"tabColor\",\n    xml_attributes = wb_color(hex = \"FF00FF00\")\n  )\n)\n\n# # look at the beauty you've created\n# wb_open(wb)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#working-with-number-formats",
    "href": "chapters/openxlsx2_style_manual.html#working-with-number-formats",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.2 Working with number formats",
    "text": "4.2 Working with number formats\n\n4.2.1 numfmts\nPer default openxlsx2 will pick up number formats for selected R classes.\n\n## Create Workbook object and add worksheets\nwb &lt;- wb_workbook()\nwb$add_worksheet(\"S1\")\nwb$add_worksheet(\"S2\")\n\ndf &lt;- data.frame(\n  \"Date\" = Sys.Date() - 0:19,\n  \"T\" = TRUE, \"F\" = FALSE,\n  \"Time\" = Sys.time() - 0:19 * 60 * 60,\n  \"Cash\" = 1:20, \"Cash2\" = 31:50,\n  \"hLink\" = \"https://CRAN.R-project.org/\",\n  \"Percentage\" = seq(0, 1, length.out = 20),\n  \"TinyNumbers\" = runif(20) / 1E9, stringsAsFactors = FALSE\n)\n\n## openxlsx will apply default Excel styling for these classes\nclass(df$Cash) &lt;- c(class(df$Cash), \"currency\")\nclass(df$Cash2) &lt;- c(class(df$Cash2), \"accounting\")\nclass(df$hLink) &lt;- \"hyperlink\"\nclass(df$Percentage) &lt;- c(class(df$Percentage), \"percentage\")\nclass(df$TinyNumbers) &lt;- c(class(df$TinyNumbers), \"scientific\")\n\nwb$add_data(\"S1\", x = df, start_row = 4, row_names = FALSE)\nwb$add_data_table(\"S2\", x = df, start_row = 4, row_names = FALSE)\n\n\n\n\n\n\n\n\n\n\n4.2.2 numfmts2\nIn addition, you can set the style to be picked up using openxlsx2 options.\n\nwb &lt;- wb_workbook()\nwb &lt;- wb_add_worksheet(wb, \"test\")\n\noptions(\"openxlsx2.dateFormat\" = \"yyyy\")\noptions(\"openxlsx2.datetimeFormat\" = \"yyyy-mm-dd\")\noptions(\"openxlsx2.numFmt\" = \"€ #.0\")\n\ndf &lt;- data.frame(\n  \"Date\" = Sys.Date() - 0:19,\n  \"T\" = TRUE, \"F\" = FALSE,\n  \"Time\" = Sys.time() - 0:19 * 60 * 60,\n  \"Cash\" = 1:20, \"Cash2\" = 31:50,\n  \"hLink\" = \"https://CRAN.R-project.org/\",\n  \"Percentage\" = seq(0, 1, length.out = 20),\n  \"TinyNumbers\" = runif(20) / 1E9, stringsAsFactors = FALSE,\n  \"numeric\" = 1\n)\n\n## openxlsx will apply default Excel styling for these classes\nclass(df$Cash) &lt;- c(class(df$Cash), \"currency\")\nclass(df$Cash2) &lt;- c(class(df$Cash2), \"accounting\")\nclass(df$hLink) &lt;- \"hyperlink\"\nclass(df$Percentage) &lt;- c(class(df$Percentage), \"percentage\")\nclass(df$TinyNumbers) &lt;- c(class(df$TinyNumbers), \"scientific\")\n\nwb$add_data(\"test\", df)\n\n\n\n\n\n\n\n\n\n\n# disable styles via options\noptions(\"openxlsx2.dateFormat\" = NULL)\noptions(\"openxlsx2.datetimeFormat\" = NULL)\noptions(\"openxlsx2.numFmt\" = NULL)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#modifying-the-column-and-row-widths",
    "href": "chapters/openxlsx2_style_manual.html#modifying-the-column-and-row-widths",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.3 Modifying the column and row widths",
    "text": "4.3 Modifying the column and row widths\n\n4.3.1 wb_set_col_widths\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet() %&gt;%\n  wb_add_data(x = mtcars, row_names = TRUE)\n\ncols_1 &lt;- 1:6\ncols_2 &lt;- \"G:L\"\nwb &lt;- wb %&gt;%\n  wb_set_col_widths(cols = cols_1, widths = \"auto\") %&gt;%\n  wb_set_col_widths(cols = cols_2, widths = 10)\n\n\n4.3.2 wb_set_row_heigths\n\nwb &lt;- wb %&gt;%\n  wb_set_row_heights(rows = 1:10, heights = 10)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#adding-borders",
    "href": "chapters/openxlsx2_style_manual.html#adding-borders",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.4 Adding borders",
    "text": "4.4 Adding borders\n\n4.4.1 add borders\n\nwb &lt;- wb_workbook()\n# full inner grid\nwb$add_worksheet(\"S1\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(\n  dims = \"A2:K33\",\n  inner_hgrid = \"thin\", inner_hcolor = wb_color(hex = \"FF808080\"),\n  inner_vgrid = \"thin\", inner_vcolor = wb_color(hex = \"FF808080\")\n)\n# only horizontal grid\nwb$add_worksheet(\"S2\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(dims = wb_dims(x = mtcars, select = \"data\"), inner_hgrid = \"thin\", inner_hcolor = wb_color(hex = \"FF808080\"))\n# only vertical grid\nwb$add_worksheet(\"S3\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(dims =  wb_dims(x = mtcars, select = \"data\"), inner_vgrid = \"thin\", inner_vcolor = wb_color(hex = \"FF808080\"))\n# no inner grid\nwb$add_worksheet(\"S4\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(\"S4\", dims = wb_dims(x = mtcars, select = \"data\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.2 styled table\nBelow we show you two ways how to create styled tables with openxlsx2 one using the high level functions to style worksheet areas and one using the bare metal approach of creating the identical table.\n\n\n\n\n\n\n\n\n\n4.4.2.1 the quick way: using high level functions\n\n# add some dummy data to the worksheet\nmat &lt;- matrix(1:4, ncol = 2, nrow = 2)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\n\ndims_head &lt;- wb_dims(x = mat, from_col = 2, from_row = 2, select = \"col_names\")\ndims_data &lt;- wb_dims(x = mat, from_col = 2, from_row = 2, select = \"data\")\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"test\") %&gt;%\n  wb_add_data(x = mat, col_names = TRUE, start_col = 2, start_row = 2) %&gt;%\n  # center first row\n  wb_add_cell_style(dims = dims_head, horizontal = \"center\") %&gt;%\n  # add border for first row\n  wb_add_border(\n    dims = dims_head,\n    bottom_color = wb_color(theme = 1), bottom_border = \"thin\",\n    top_color = wb_color(theme = 1), top_border = \"double\",\n    left_border = NULL, right_border = NULL\n  ) %&gt;%\n  # add border for last row\n  wb_add_border(\n    dims = dims_data,\n    bottom_color = wb_color(theme = 1), bottom_border = \"double\",\n    top_border = NULL, left_border = NULL, right_border = NULL\n  )\n\n\n4.4.2.2 the long way: creating everything from the bone\n\n# add some dummy data to the worksheet\nmat &lt;- matrix(1:4, ncol = 2, nrow = 2)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"test\") %&gt;%\n  wb_add_data(x = mat, start_col = 2, start_row = 2)\n\n# create a border style and assign it to the workbook\nblack &lt;- wb_color(hex = \"FF000000\")\ntop_border &lt;- create_border(\n  top = \"double\", top_color = black,\n  bottom = \"thin\", bottom_color = black\n)\n\nbottom_border &lt;- create_border(bottom = \"double\", bottom_color = black)\n\nwb$styles_mgr$add(top_border, \"top_border\")\nwb$styles_mgr$add(bottom_border, \"bottom_border\")\n\n# create a new cell style, that uses the fill, the font and the border style\ntop_cellxfs &lt;- create_cell_style(\n  numFmtId = 0,\n  horizontal = \"center\",\n  borderId = wb$styles_mgr$get_border_id(\"top_border\")\n)\nbottom_cellxfs &lt;- create_cell_style(\n  numFmtId = 0,\n  borderId = wb$styles_mgr$get_border_id(\"bottom_border\")\n)\n\n# assign this style to the workbook\nwb$styles_mgr$add(top_cellxfs, \"top_styles\")\nwb$styles_mgr$add(bottom_cellxfs, \"bottom_styles\")\n\n# assign the new cell style to the header row of our data set\ncell &lt;- \"B2:C2\"\nwb &lt;- wb %&gt;% wb_set_cell_style(dims = cell, style = wb$styles_mgr$get_xf_id(\"top_styles\"))\ncell &lt;- \"B4:C4\"\nwb &lt;- wb %&gt;% wb_set_cell_style(dims = cell, style = wb$styles_mgr$get_xf_id(\"bottom_styles\"))",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#use-workbook-colors-and-modify-them",
    "href": "chapters/openxlsx2_style_manual.html#use-workbook-colors-and-modify-them",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.5 Use workbook colors and modify them",
    "text": "4.5 Use workbook colors and modify them\nThe loop below will apply the tint attribute to the fill color\n\n\n\n\nTint variations of the theme colors.\n\n\n\n\nwb &lt;- wb_workbook() %&gt;% wb_add_worksheet(\"S1\")\n\ntints &lt;- seq(-0.9, 0.9, by = 0.1)\n\nfor (i in 0:9) {\n  for (tnt in tints) {\n    col &lt;- paste0(int2col(i + 1), which(tints %in% tnt))\n\n    if (tnt == 0) {\n      wb &lt;- wb %&gt;% wb_add_fill(dims = col, color = wb_color(theme = i))\n    } else {\n      wb &lt;- wb %&gt;% wb_add_fill(dims = col, color = wb_color(theme = i, tint = tnt))\n    }\n  }\n}",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#copy-cell-styles",
    "href": "chapters/openxlsx2_style_manual.html#copy-cell-styles",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.6 Copy cell styles",
    "text": "4.6 Copy cell styles\nIt is possible to copy the styles of several cells at once. In the following example, the styles of some cells from a formatted workbook are applied to a previously empty cell range. Be careful though, wb_get_cell_style() returns only some styles, so you have to make sure that the copy-from and copy-to dimensions match in a meaningful way.\n\nwb &lt;- wb_load(system.file(\"extdata\", \"oxlsx2_sheet.xlsx\", package = \"openxlsx2\")) %&gt;%\n  wb_set_cell_style(1, \"A30:G35\", wb_get_cell_style(., 1, \"A10:G15\"))\n# wb_open(wb)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#style-strings",
    "href": "chapters/openxlsx2_style_manual.html#style-strings",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.7 Style strings",
    "text": "4.7 Style strings\nUsing fmt_txt() is possible to style strings independently of the cell containing the string.\n\ntxt &lt;-\n  fmt_txt(\"Embracing the full potential of \") +\n  fmt_txt(\"openxlsx2\", bold = TRUE, size = 16) +\n  fmt_txt(\" with \") +\n  fmt_txt(\"fmt_txt()\", font = \"Courier\") +\n  fmt_txt(\" !\")\n\nwb &lt;- wb_workbook()$add_worksheet()$add_data(x = txt, col_names = FALSE)\n\n\n\n\n\n\n\n\n\nAs shown above it is possible to combine multiple styles together into a longer string. It is even possible to use fmt_txt() as na.strings:\n\ndf &lt;- mtcars\ndf[df &lt; 4] &lt;- NA\n\nna_red &lt;- fmt_txt(\"N/A\", color = wb_color(\"red\"), italic = TRUE, bold = TRUE)\n\nwb &lt;- wb_workbook()$add_worksheet()$add_data(x = df, na.strings = na_red)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#create-custom-table-styles",
    "href": "chapters/openxlsx2_style_manual.html#create-custom-table-styles",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.8 Create custom table styles",
    "text": "4.8 Create custom table styles\nWith create_tablestyle() it is possible to create your own table styles. This function uses create_dxfs_style() (just like your spreadsheet software does). Therefore, it is not quite as user-friendly. The following example shows how the function creates a red table style. The various dxfs styles must be created and assigned to the workbook (similar styles are used in conditional formatting). In create_tablestyle() these styles are assigned to the table style elements. Once the table style is created, it must also be assigned to the workbook. After that you can use it in the workbook like any other table style.\n\n# a red table style\ndx0 &lt;- create_dxfs_style(\n  border = TRUE,\n  left_color = wb_color(\"red\"),\n  right_color = NULL, right_style = NULL,\n  top_color = NULL, top_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx1 &lt;- create_dxfs_style(\n  border = TRUE,\n  left_color = wb_color(\"red\"),\n  right_color = NULL, right_style = NULL,\n  top_color = NULL, top_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx2 &lt;- create_dxfs_style(\n  border = TRUE,\n  top_color = wb_color(\"red\"),\n  left_color = NULL, left_style = NULL,\n  right_color = NULL, right_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx3 &lt;- create_dxfs_style(\n  border = TRUE,\n  top_color = wb_color(\"red\"),\n  left_color = NULL, left_style = NULL,\n  right_color = NULL, right_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx4 &lt;- create_dxfs_style(\n  text_bold = TRUE\n)\n\ndx5 &lt;- create_dxfs_style(\n  text_bold = TRUE\n)\n\ndx6 &lt;- create_dxfs_style(\n  font_color = wb_color(\"red\"),\n  text_bold = TRUE,\n  border = TRUE,\n  top_style = \"double\",\n  left_color = NULL, left_style = NULL,\n  right_color = NULL, right_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx7 &lt;- create_dxfs_style(\n  font_color = wb_color(\"white\"),\n  text_bold = TRUE,\n  bgFill = wb_color(\"red\"),\n  fgColor = wb_color(\"red\")\n)\n\ndx8 &lt;- create_dxfs_style(\n  border = TRUE,\n  left_color = wb_color(\"red\"),\n  top_color = wb_color(\"red\"),\n  right_color = wb_color(\"red\"),\n  bottom_color = wb_color(\"red\")\n)\n\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(grid_lines = FALSE)\n\nwb$add_style(dx0)\nwb$add_style(dx1)\nwb$add_style(dx2)\nwb$add_style(dx3)\nwb$add_style(dx4)\nwb$add_style(dx5)\nwb$add_style(dx6)\nwb$add_style(dx7)\nwb$add_style(dx8)\n\n# finally create the table\nxml &lt;- create_tablestyle(\n  name                 = \"red_table\",\n  whole_table          = wb$styles_mgr$get_dxf_id(\"dx8\"),\n  header_row           = wb$styles_mgr$get_dxf_id(\"dx7\"),\n  total_row            = wb$styles_mgr$get_dxf_id(\"dx6\"),\n  first_column         = wb$styles_mgr$get_dxf_id(\"dx5\"),\n  last_column          = wb$styles_mgr$get_dxf_id(\"dx4\"),\n  first_row_stripe     = wb$styles_mgr$get_dxf_id(\"dx3\"),\n  second_row_stripe    = wb$styles_mgr$get_dxf_id(\"dx2\"),\n  first_column_stripe  = wb$styles_mgr$get_dxf_id(\"dx1\"),\n  second_column_stripe = wb$styles_mgr$get_dxf_id(\"dx0\")\n)\n\n\nwb$add_style(xml)\n\n# create a table and apply the custom style\nwb &lt;- wb %&gt;%\n  wb_add_data_table(x = mtcars, table_style = \"red_table\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#named-styles",
    "href": "chapters/openxlsx2_style_manual.html#named-styles",
    "title": "\n4  Styling of worksheets\n",
    "section": "\n4.9 Named styles",
    "text": "4.9 Named styles\n\nwb &lt;- wb_workbook()$add_worksheet()\n\nname &lt;- \"Normal\"\ndims &lt;- \"A1\"\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Bad\"\ndims &lt;- \"B1\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Good\"\ndims &lt;- \"C1\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Neutral\"\ndims &lt;- \"D1\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Calculation\"\ndims &lt;- \"A2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Check Cell\"\ndims &lt;- \"B2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Explanatory Text\"\ndims &lt;- \"C2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Input\"\ndims &lt;- \"D2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Linked Cell\"\ndims &lt;- \"E2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Note\"\ndims &lt;- \"F2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Output\"\ndims &lt;- \"G2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Warning Text\"\ndims &lt;- \"H2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 1\"\ndims &lt;- \"A3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 2\"\ndims &lt;- \"B3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 3\"\ndims &lt;- \"C3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 4\"\ndims &lt;- \"D3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Title\"\ndims &lt;- \"E3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Total\"\ndims &lt;- \"F3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nfor (i in seq_len(6)) {\n\n  name &lt;- paste0(\"20% - Accent\", i)\n  dims &lt;- paste0(int2col(i), \"4\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n\n  name &lt;- paste0(\"40% - Accent\", i)\n  dims &lt;- paste0(int2col(i), \"5\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n\n  name &lt;- paste0(\"60% - Accent\", i)\n  dims &lt;- paste0(int2col(i), \"6\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n\n  name &lt;- paste0(\"Accent\", i)\n  dims &lt;- paste0(int2col(i), \"7\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n\n}\n\nname &lt;- \"Comma\"\ndims &lt;- \"A8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Comma [0]\"\ndims &lt;- \"B8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Currency\"\ndims &lt;- \"C8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Currency [0]\"\ndims &lt;- \"D8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Per cent\"\ndims &lt;- \"E8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\n# wb$open()",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Styling of worksheets</span>"
    ]
  },
  {
    "objectID": "chapters/conditional-formatting.html",
    "href": "chapters/conditional-formatting.html",
    "title": "\n5  Conditional Formatting, Databars, and Sparklines\n",
    "section": "",
    "text": "5.1 Conditional Formatting\nConditional formatting is helpful to visually emphasize trends, outliers, or other important aspects of the data it is applied to. In openxlsx2 conditional formatting is applied as follows:\nWe will use the following workbook and the two styles to differentiate in negative and positive values.\nwb &lt;- wb_workbook()\nwb$add_dxfs_style(name = \"negStyle\", font_color = wb_color(hex = \"FF9C0006\"), bg_fill = wb_color(hex = \"FFFFC7CE\"))\nwb$add_dxfs_style(name = \"posStyle\", font_color = wb_color(hex = \"FF006100\"), bg_fill = wb_color(hex = \"FFC6EFCE\"))",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conditional Formatting, Databars, and Sparklines</span>"
    ]
  },
  {
    "objectID": "chapters/conditional-formatting.html#conditional-formatting",
    "href": "chapters/conditional-formatting.html#conditional-formatting",
    "title": "\n5  Conditional Formatting, Databars, and Sparklines\n",
    "section": "",
    "text": "Select dimension range: First select, the range of cells to which the conditional formatting is applied to.\nDefine a rule: Define a rule or condition that will be used for the formatting.\nDefine a style: (optional) the style used by conditional formatting of various cells can differ. This styles can include for example changes to the font, background, borders.\n\n\n\n\n5.1.1 Rule applies to all each cell in range\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"cellIs\")\nwb$add_data(\"cellIs\", -5:5)\nwb$add_data(\"cellIs\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"cellIs\",\n  dims = \"A1:A11\",\n  rule = \"!=0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"cellIs\",\n  dims = \"A1:A11\",\n  rule = \"==0\",\n  style = \"posStyle\"\n)\n\n\n5.1.2 Highlight row dependent on first cell in row\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"Moving Row\")\nwb$add_data(\"Moving Row\", -5:5)\nwb$add_data(\"Moving Row\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"Moving Row\",\n  dims = \"A1:B11\",\n  rule = \"$A1&lt;0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Moving Row\",\n  dims = \"A1:B11\",\n  rule = \"$A1&gt;0\",\n  style = \"posStyle\"\n)\n\n\n5.1.3 Highlight column dependent on first cell in column\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"Moving Col\")\nwb$add_data(\"Moving Col\", -5:5)\nwb$add_data(\"Moving Col\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"Moving Col\",\n  dims = \"A1:B11\",\n  rule = \"A$1&lt;0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Moving Col\",\n  dims = \"A1:B11\",\n  rule = \"A$1&gt;0\",\n  style = \"posStyle\"\n)\n\n\n5.1.4 Highlight entire range cols X rows dependent only on cell A1\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"Dependent on\")\nwb$add_data(\"Dependent on\", -5:5)\nwb$add_data(\"Dependent on\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A1:B11\",\n  rule = \"$A$1 &lt; 0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A1:B11\",\n  rule = \"$A$1&gt;0\",\n  style = \"posStyle\"\n)\n\n\n5.1.5 Highlight cells in column 1 based on value in column 2\n\nwb$add_data(\"Dependent on\", data.frame(x = 1:10, y = runif(10)), startRow = 15)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A16:A25\",\n  rule = \"B16&lt;0.5\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A16:A25\",\n  rule = \"B16&gt;=0.5\",\n  style = \"posStyle\"\n)\n\n\n5.1.6 Highlight duplicates using default style\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"Duplicates\")\nwb$add_data(\"Duplicates\", sample(LETTERS[1:15], size = 10, replace = TRUE))\nwb$add_conditional_formatting(\n  \"Duplicates\",\n  dims = \"A1:A10\",\n  type = \"duplicatedValues\"\n)\n\n\n5.1.7 Cells containing text\n\n\n\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_worksheet(\"containsText\")\nwb$add_data(\"containsText\", sapply(1:10, fn))\nwb$add_conditional_formatting(\n  \"containsText\",\n  dim = \"A1:A10\",\n  type = \"containsText\",\n  rule = \"A\"\n)\nwb$add_worksheet(\"notcontainsText\")\n\n\n5.1.8 Cells not containing text\n\n\n\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_data(\"notcontainsText\", x = sapply(1:10, fn))\nwb$add_conditional_formatting(\n  \"notcontainsText\",\n  dim = \"A1:A10\",\n  type = \"notContainsText\",\n  rule = \"A\"\n)\n\n\n5.1.9 Cells begins with text\n\n\n\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_worksheet(\"beginsWith\")\nwb$add_data(\"beginsWith\", x = sapply(1:100, fn))\nwb$add_conditional_formatting(\n  \"beginsWith\",\n  dim = \"A1:A100\",\n  type = \"beginsWith\",\n  rule = \"A\"\n)\n\n\n5.1.10 Cells ends with text\n\n\n\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_worksheet(\"endsWith\")\nwb$add_data(\"endsWith\", x = sapply(1:100, fn))\nwb$add_conditional_formatting(\n  \"endsWith\",\n  dim = \"A1:A100\",\n  type = \"endsWith\",\n  rule = \"A\"\n)\n\n\n5.1.11 Colorscale colors cells based on cell value\n\n\n\n\nYep, that is a color scale image.\n\n\n\n\ndf &lt;- read_xlsx(\"https://github.com/JanMarvin/openxlsx-data/raw/main/readTest.xlsx\", sheet = 5)\nwb$add_worksheet(\"colorScale\", zoom = 30)\nwb$add_data(\"colorScale\", x = df, col_names = FALSE) ### write data.frame\n\nRule is a vector or colors of length 2 or 3 (any hex color or any of colors()). If rule is NULL, min and max of cells is used. Rule must be the same length as style or L.\n\nwb$add_conditional_formatting(\n  \"colorScale\",\n  dims = wb_dims(x = df, col_names = FALSE),\n  style = c(\"black\", \"white\"),\n  rule = c(0, 255),\n  type = \"colorScale\"\n)\nwb$set_col_widths(\"colorScale\", cols = seq_along(df), widths = 1.07)\nwb$set_row_heights(\"colorScale\", rows = seq_len(nrow(df)), heights = 7.5)\n\n\n5.1.12 Between\n\n\n\n\n\n\n\n\nHighlight cells in interval [-2, 2]\n\nwb$add_worksheet(\"between\")\nwb$add_data(\"between\", -5:5)\nwb$add_conditional_formatting(\n  \"between\",\n  dims = \"A1:A11\",\n  type = \"between\",\n  rule = c(-2, 2)\n)\nwb$add_worksheet(\"topN\")\n\n\n5.1.13 Top N\n\n\n\n\n\n\n\n\n\nwb$add_data(\"topN\", data.frame(x = 1:10, y = rnorm(10)))\n\nHighlight top 5 values in column x\n\nwb$add_conditional_formatting(\n  \"topN\",\n  dims = \"A2:A11\",\n  style = \"posStyle\",\n  type = \"topN\",\n  params = list(rank = 5)\n)\n\nHighlight top 20 percentage in column y\n\nwb$add_conditional_formatting(\n  \"topN\",\n  dims = \"B2:B11\",\n  style = \"posStyle\",\n  type = \"topN\",\n  params = list(rank = 20, percent = TRUE)\n)\nwb$add_worksheet(\"bottomN\")\n\n\n5.1.14 Bottom N\n\n\n\n\n\n\n\n\n\nwb$add_data(\"bottomN\", data.frame(x = 1:10, y = rnorm(10)))\n\nHighlight bottom 5 values in column x\n\nwb$add_conditional_formatting(\n  \"bottomN\",\n  dims = \"A2:A11\",\n  style = \"negStyle\",\n  type = \"bottomN\",\n  params = list(rank = 5)\n)\n\nHighlight bottom 20 percentage in column y\n\nwb$add_conditional_formatting(\n  \"bottomN\",\n  dims = \"B2:B11\",\n  style = \"negStyle\",\n  type = \"bottomN\",\n  params = list(rank = 20, percent = TRUE)\n)\nwb$add_worksheet(\"logical operators\")\n\n\n5.1.15 Logical Operators\n\n\n\n\n\n\n\n\nYou can use Excels logical Operators\n\nwb$add_data(\"logical operators\", 1:10)\nwb$add_conditional_formatting(\n  \"logical operators\",\n  dims = \"A1:A10\",\n  rule = \"OR($A1=1,$A1=3,$A1=5,$A1=7)\"\n)\n\n\n5.1.16 (Not) Contains Blanks\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"contains blanks\")\nwb$add_data(x = c(NA, 1, 2, ''), colNames = FALSE, na.strings = NULL)\nwb$add_data(x = c(NA, 1, 2, ''), colNames = FALSE, na.strings = NULL, start_col = 2)\nwb$add_conditional_formatting(dims = \"A1:A4\", type = \"containsBlanks\")\nwb$add_conditional_formatting(dims = \"B1:B4\", type = \"notContainsBlanks\")\n\n\n5.1.17 (Not) Contains Errors\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"contains errors\")\nwb$add_data(x = c(1, NaN), colNames = FALSE)\nwb$add_data(x = c(1, NaN), colNames = FALSE, start_col = 2)\nwb$add_conditional_formatting(dims = \"A1:A3\", type = \"containsErrors\")\nwb$add_conditional_formatting(dims = \"A1:A3\", type = \"notContainsErrors\")\n\n\n5.1.18 Iconset\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"iconset\")\nwb$add_data(x = c(100, 50, 30), colNames = FALSE)\nwb$add_conditional_formatting(\n  dims = \"A1:A6\",\n  rule = c(-67, -33, 0, 33, 67),\n  type = \"iconSet\",\n  params = list(\n    percent = FALSE,\n    iconSet = \"5Arrows\",\n    reverse = TRUE)\n  )\n\n\n5.1.19 Unique Values\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"unique values\")\nwb$add_data(x = c(1:4, 1:2), colNames = FALSE)\nwb$add_conditional_formatting(dims = \"A1:A6\", type = \"uniqueValues\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conditional Formatting, Databars, and Sparklines</span>"
    ]
  },
  {
    "objectID": "chapters/conditional-formatting.html#databars",
    "href": "chapters/conditional-formatting.html#databars",
    "title": "\n5  Conditional Formatting, Databars, and Sparklines\n",
    "section": "\n5.2 Databars",
    "text": "5.2 Databars\n\n\n\n\n\n\n\n\n\nwb$add_worksheet(\"databar\")\n### Databars\nwb$add_data(\"databar\", -5:5, start_col = 1)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"A1:A11\",\n  type = \"dataBar\"\n) ### Default colors\n\nwb$add_data(\"databar\", -5:5, start_col = 3)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"A1:A10\",\n  type = \"dataBar\",\n  params = list(\n    showValue = FALSE,\n    gradient = FALSE\n  )\n) ### Default colors\n\nwb$add_data(\"databar\", -5:5, start_col = 5)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"E1:E11\",\n  type = \"dataBar\",\n  style = c(\"#a6a6a6\"),\n  params = list(showValue = FALSE)\n)\n\nwb$add_data(\"databar\", -5:5, start_col = 7)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"G1:G11\",\n  type = \"dataBar\",\n  style = c(\"red\"),\n  params = list(\n    showValue = TRUE,\n    gradient = FALSE\n  )\n)\n\n# custom color\nwb$add_data(\"databar\", -5:5, start_col = 9)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = wb_dims(cols = 9, rows = 1:11),\n  type = \"dataBar\",\n  style = c(\"#a6a6a6\", \"#a6a6a6\"),\n  params = list(showValue = TRUE, gradient = FALSE)\n)\n\n# with rule\nwb$add_data(x = -5:5, start_col = 11)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = wb_dims(cols = 11, rows = 1:11),\n  type = \"dataBar\",\n  rule = c(0, 5),\n  style = c(\"#a6a6a6\", \"#a6a6a6\"),\n  params = list(showValue = TRUE, gradient = FALSE)\n)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conditional Formatting, Databars, and Sparklines</span>"
    ]
  },
  {
    "objectID": "chapters/conditional-formatting.html#sparklines",
    "href": "chapters/conditional-formatting.html#sparklines",
    "title": "\n5  Conditional Formatting, Databars, and Sparklines\n",
    "section": "\n5.3 Sparklines",
    "text": "5.3 Sparklines\n\n\n\n\n\n\n\n\n\nsl &lt;- create_sparklines(\"Sheet 1\", \"A3:K3\", \"L3\")\nwb &lt;- wb_workbook() %&gt;%\n   wb_add_worksheet() %&gt;%\n   wb_add_data(x = mtcars) %&gt;%\n   wb_add_sparklines(sparklines = sl)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Conditional Formatting, Databars, and Sparklines</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html",
    "href": "chapters/openxlsx2_charts_manual.html",
    "title": "\n6  Charts\n",
    "section": "",
    "text": "6.1 Adding a chart as an image to a workbook\nYou can include any image in PNG or JPEG format. Simply open a device and save the output and pass it to the worksheet with wb_add_image().\nmyplot &lt;- tempfile(fileext = \".jpg\")\njpeg(myplot)\nplot(AirPassengers)\ninvisible(dev.off())\n\n# Add basic plots to the workbook\nwb$add_worksheet(\"add_image\")$add_image(file = myplot)\nThe plot output added as image\nIt is possible to use ragg to create the png files to add to the worksheet:\nlibrary(ragg)\nragg_file &lt;- tempfile(fileext = \".png\")\nagg_png(ragg_file, width = 1000, height = 500, res = 144)\nplot(x = mtcars$mpg, y = mtcars$disp)\ninvisible(dev.off())\n\nwb$add_worksheet(\"add_image2\")$add_image(file = ragg_file)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Charts</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html#adding-ggplot2-plots-to-a-workbook",
    "href": "chapters/openxlsx2_charts_manual.html#adding-ggplot2-plots-to-a-workbook",
    "title": "\n6  Charts\n",
    "section": "\n6.2 Adding {ggplot2} plots to a workbook",
    "text": "6.2 Adding {ggplot2} plots to a workbook\nYou can include ggplot2 plots similar to how you would include them with openxlsx. Call the plot first and afterwards use wb_add_plot().\n\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = mpg, fill = as.factor(gear))) +\n  ggtitle(\"Distribution of Gas Mileage\") +\n  geom_density(alpha = 0.5)\n\n# Add ggplot to the workbook\nwb$add_worksheet(\"add_plot\")$\n  add_plot(width = 5, height = 3.5, fileType = \"png\", units = \"in\")\n\n\n\n\n\nThe ggplot2 output",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Charts</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html#adding-plots-via-rvg-or-devemf",
    "href": "chapters/openxlsx2_charts_manual.html#adding-plots-via-rvg-or-devemf",
    "title": "\n6  Charts\n",
    "section": "\n6.3 Adding plots via {rvg} or {devEMF}\n",
    "text": "6.3 Adding plots via {rvg} or {devEMF}\n\nIf you want vector graphics that can be modified in spreadsheet software the dml_xlsx() device comes in handy. You can pass the output via wb_add_drawing().\n\nlibrary(rvg)\n\n## create rvg example\ntmp &lt;- tempfile(fileext = \".xml\")\ndml_xlsx(file =  tmp, fonts = list(sans = \"Bradley Hand\"))\nggplot(data = iris,\n       mapping = aes(x = Sepal.Length, y = Petal.Width)) +\n  geom_point() + labs(title = \"With font Bradley Hand\") +\n  theme_minimal(base_family = \"sans\", base_size = 18)\ninvisible(dev.off())\n\n# Add rvg to the workbook\nwb$add_worksheet(\"add_drawing\")$\n  add_drawing(xml = tmp)$\n  add_drawing(xml = tmp, dims = NULL)\n\n\n\n\n\nAn rvg chart is a vector graphic that can be modified in spreadsheet software (this screenshot differs from the code above as the second chart below has been removed)\n\n\n\n\nlibrary(devEMF)\n\ntmp_emf &lt;- tempfile(fileext = \".emf\")\ndevEMF::emf(file = tmp_emf)\nggplot(data = iris,\n       mapping = aes(x = Sepal.Length, y = Petal.Width)) +\n  geom_point()\n#&gt; Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): devEMF: your\n#&gt; system substituted font family 'Nimbus Sans' when you requested 'Helvetica'\n#&gt; Warning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): devEMF: your\n#&gt; system substituted font family 'Nimbus Sans' when you requested 'Helvetica'\ndev.off()\n#&gt; png \n#&gt;   2\n\n# Add rvg to the workbook\nwb$add_worksheet(\"add_emf\")$\n  add_drawing(dims = \"A1:D4\", xml = tmp)$\n  add_image(dims = \"E1:H4\", file = tmp_emf)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Charts</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html#adding-mschart-plots",
    "href": "chapters/openxlsx2_charts_manual.html#adding-mschart-plots",
    "title": "\n6  Charts\n",
    "section": "\n6.4 Adding {mschart} plots",
    "text": "6.4 Adding {mschart} plots\nIf you want native openxml charts, have a look at mschart. Create one of the chart files and pass it to the workbook with wb_add_mschart().\nThere are two options possible.\n\nEither the default mschart output identical to the one in officer. Passing a data object and let mschart prepare the data. In this case wb_add_mschart() will add a new data region.\nPassing a wb_data() object to mschart. This object contains references to the data on the worksheet and allows using data “as is”.\n\n\n6.4.1 Add chart and data\n\nlibrary(mschart)\n\n## create chart from mschart object (this creates new input data)\nmylc &lt;- ms_linechart(\n  data = browser_ts,\n  x = \"date\",\n  y = \"freq\",\n  group = \"browser\"\n)\n\nwb$add_worksheet(\"add_mschart\")$add_mschart(dims = \"A10:G25\", graph = mylc)\n\n\n\n\n\nAn mschart graph\n\n\n\n\n6.4.2 Add chart using wb_data()\n\nThese are native spreadsheet charts that are dynamic in terms of the data visible on the sheet. It is therefore possible to hide columns or rows of the data, e.g. with groups, so that the chart shows more data when a group is expanded.\n\n## create chart referencing worksheet cells as input\n# write data starting at B2\nwb$add_worksheet(\"add_mschart - wb_data\")$\n  add_data(x = mtcars, dims = \"B2\")$\n  add_data(x = data.frame(name = rownames(mtcars)), dims = \"A2\")\n\n# create wb_data object this will tell this mschart\n# from this PR to create a file corresponding to openxlsx2\ndat &lt;- wb_data(wb, dims = \"A2:G10\")\n\n# create a few mscharts\nscatter_plot &lt;- ms_scatterchart(\n  data = dat,\n  x = \"mpg\",\n  y = c(\"disp\", \"hp\")\n)\n\nbar_plot &lt;- ms_barchart(\n  data = dat,\n  x = \"name\",\n  y = c(\"disp\", \"hp\")\n)\n\narea_plot &lt;- ms_areachart(\n  data = dat,\n  x = \"name\",\n  y = c(\"disp\", \"hp\")\n)\n\nline_plot &lt;- ms_linechart(\n  data = dat,\n  x = \"name\",\n  y = c(\"disp\", \"hp\"),\n  labels = c(\"disp\", \"hp\")\n)\n\n# add the charts to the data\nwb &lt;- wb %&gt;%\n  wb_add_mschart(dims = \"F4:L20\", graph = scatter_plot) %&gt;%\n  wb_add_mschart(dims = \"F21:L37\", graph = bar_plot) %&gt;%\n  wb_add_mschart(dims = \"M4:S20\", graph = area_plot) %&gt;%\n  wb_add_mschart(dims = \"M21:S37\", graph = line_plot)\n\n\n\n\n\nMultiple mschart graphs in a single spreadsheet\n\n\n\n\n6.4.3 Add and fill a chartsheet\nFinally it is possible to add mschart charts on a so called chartsheet. These are special sheets that contain only a chart object, referencing data from another sheet.\n\n# add chartsheet\nwb &lt;- wb %&gt;%\n  wb_add_chartsheet() %&gt;%\n  wb_add_mschart(graph = scatter_plot)\n\n\n\n\n\nA mschart graph on a chartsheet",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Charts</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html",
    "href": "chapters/openxlsx2_formulas_manual.html",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "",
    "text": "7.1 Simple formulas\nGenerally speaking it is possible to use all valid formulas allowed in spreadsheet software. This can be functions, arithmetic operators or a mix of both. It’s possible to create functions for all by spreadsheet software supported functions, including custom vml ones (though this requires a workbook that was loaded with the required macros).\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = \"SUM(A2, B2)\", dims = \"D2\")$\n  add_formula(x = \"A2 + B2\", dims = \"D3\")",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#array-formulas",
    "href": "chapters/openxlsx2_formulas_manual.html#array-formulas",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "\n7.2 Array formulas",
    "text": "7.2 Array formulas\nArray formulas in openxml spreadsheets allow performing multiple calculations on a data vector or ‘array’ instead of a single cell. An array is similar to a vector in R. Unlike regular formulas that operate on a single value, array formulas can process multiple values simultaneously. An important distinction is that that you need array formulas, whenever the formula evaluates an array, even if the output creates only a single cell. So something like this SUM(ABS(A2:A11)) would require an array formula, because the SUM() function is called on a function that returns an array ABS(A2:A11). If the previous formula in written as basic formula, spreadsheet software is likely to mess it up and tries to insert @ characters in the formula.\n\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = \"A2:A7 * B2:B7\", dims = \"C2:C7\", array = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#array-formulas-creating-multiple-fields",
    "href": "chapters/openxlsx2_formulas_manual.html#array-formulas-creating-multiple-fields",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "\n7.3 Array formulas creating multiple fields",
    "text": "7.3 Array formulas creating multiple fields\nIn the example below we want to use MMULT() which creates a matrix multiplication. This requires us to write an array formula and to specify the region where the output will be written to.\n\nm1 &lt;- matrix(1:6, ncol = 2)\nm2 &lt;- matrix(7:12, nrow = 2)\n\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = m1, startCol = 1)$\n  add_data(x = m2, startCol = 4)$\n  add_formula(x = \"MMULT(A2:B4, D2:F3)\", dims = \"H2:J4\", array = TRUE)\n# wb$open()\n\nSimilar a the coefficients of a linear regression\n\n# we expect to find this in D1:E1\ncoef(lm(head(cars)))\n#&gt; (Intercept)        dist \n#&gt;   5.2692308   0.1153846\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = \"LINEST(A2:A7, B2:B7, TRUE)\", dims = \"D2:E2\", array = TRUE)\n# wb$open()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#modern-spreadsheet-functions",
    "href": "chapters/openxlsx2_formulas_manual.html#modern-spreadsheet-functions",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "\n7.4 Modern spreadsheet functions",
    "text": "7.4 Modern spreadsheet functions\nSpreadsheet functions are constantly evolving and similarly extended. Several formulas introduced in the MS365 Excel versions require _xlfn. as prefix for the function name. Such formulas will only be evaluated with compatible spreadsheet software. In case of doubt, see Excel functions (alphabetical) for a list of all functions and an indicator for the software version in which they were introduced.\n\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = cars)$\n  add_data(dims = \"D1\", x = \"Unique Values of Speed\")$\n  add_formula(\n    dims = wb_dims(x = unique(cars$speed), from_col = \"D\", from_row = 2),\n    x = paste0(\"_xlfn.UNIQUE(\", wb_dims(x = cars, cols = \"speed\"), \")\"),\n    array = TRUE\n  )",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#shared-formulas",
    "href": "chapters/openxlsx2_formulas_manual.html#shared-formulas",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "\n7.5 Shared formulas",
    "text": "7.5 Shared formulas\nA neat feature in spreadsheet software is that you can drag cells around to fill cells with content of other cells. Whenever you are dragging a cell containing a formula, this formula will be extended onto other cell regions. This is called a shared formula. In openxlsx2 you can use shared formulas starting with release 1.9.\n\ndf &lt;- data.frame(\n  x = 1:5,\n  y = 1:5 * 2\n)\n\nwb &lt;-  wb_workbook()$add_worksheet()$add_data(x = df)$\n  add_formula(x = \"=A2/B2\", dims = \"C2:C6\",shared = TRUE)$\n  add_formula(x = \"=A$2/B$2\", dims   = \"D2:D6\", shared = TRUE)\n\nwb_to_df(wb, show_formula = TRUE)\n#&gt;   x  y     NA       NA\n#&gt; 2 1  2 =A2/B2 =A$2/B$2\n#&gt; 3 2  4 =A3/B3 =A$2/B$2\n#&gt; 4 3  6 =A4/B4 =A$2/B$2\n#&gt; 5 4  8 =A5/B5 =A$2/B$2\n#&gt; 6 5 10 =A6/B6 =A$2/B$2",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#cell-error-handling",
    "href": "chapters/openxlsx2_formulas_manual.html#cell-error-handling",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "\n7.6 Cell error handling",
    "text": "7.6 Cell error handling\nSpreadsheet users will be familiar with various errors thrown once formulas are used. These are not always useful in spreadsheet software and can be removed using wb_add_ignore_error(). This function allows to fine tune the errors that are returned per cell.\n\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(dims = \"B1\", x = t(c(1, 2, 3)), colNames = FALSE)$\n  add_formula(dims = \"A1\", x = \"SUM(B1:C1)\")$\n  add_ignore_error(dims = \"A1\", formulaRange = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#cells-metadata-cm-formulas",
    "href": "chapters/openxlsx2_formulas_manual.html#cells-metadata-cm-formulas",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "\n7.7 cells metadata (cm) formulas",
    "text": "7.7 cells metadata (cm) formulas\nSimilar to array formulas, these cell metadata (cm) formulas hide to the user that they are array formulas. Using these is implemented in openxlsx2 &gt; 0.6.1:\n\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = 'SUM(ABS(A2:A7))', dims = \"D2\", cm = TRUE)\n#&gt; Warning in write_data2(wb = wb, sheet = sheet, data = x, name = name, colNames\n#&gt; = colNames, : modifications with cm formulas are experimental. use at own risk\n# wb$open()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#datatable-formulasopenxlsx2_formulas_manual-1",
    "href": "chapters/openxlsx2_formulas_manual.html#datatable-formulasopenxlsx2_formulas_manual-1",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "\n7.8 dataTable formulas1\n",
    "text": "7.8 dataTable formulas1\n\n\n\n\nA\nB\nC\n\n\n\n1\nsales_price\nCOGS\nsales_quantity\n\n\n2\n20\n5\n1\n\n\n3\n30\n11\n2\n\n\n4\n40\n13\n3\n\n\n\nGiven a basic table like the above, a similarly basic formula for total_sales would be “= A2 * C2” with the row value changing at each row.\nAn implementation for this formula using wb_add_formula() would look this (taken from current documentation) lets say we’ve read in the data and assigned it to the table company_sales\n\n## creating example data\ncompany_sales &lt;- data.frame(\n    sales_price = c(20, 30, 40),\n    COGS = c(5, 11, 13),\n    sales_quantity = c(1, 2, 3)\n)\n\n## write in the formula\ncompany_sales$total_sales  &lt;- paste(paste0(\"A\", 1:3 + 1L), paste0(\"C\", 1:3 + 1L), sep = \" * \")\n## add the formula class\nclass(company_sales$total_sales) &lt;- c(class(company_sales$total_sales), \"formula\")\n\n## write a workbook\nwb &lt;- wb_workbook()$\n  add_worksheet(\"Total Sales\")$\n  add_data_table(x = company_sales)\n\nThen we create the workbook, worksheet, and use wb_add_data_table().\nOne of the advantages of the open xml dataTable syntax is that we don’t have to specify row numbers or columns as letters. The table also grows dynamically, adding new rows as new data is appended and extending formulas to the new rows. These dataTable have named columns that we can use instead of letters. When writing the formulas within the dataTable we would use the following syntax [@[column_name]] to reference the current row. So the total_sales formula written in open xml in dataTable would look like this; =[@[sales_price]] * [@[sales_quantity]]\nIf we are writing the formula outside of the dataTable we have to reference the table name. In this case lets say the table name is ‘daily_sales’ =daily_sales[@[sales_price]] * daily_sales[@[sales_quantity]]\nHowever, if we were to pass this as the text for the formula to be written it would cause an error because the syntax that open xml requires for selecting the current row is different.\nIn open xml the dataTable formula looks like this:\n&lt;calculatedColumnFormula&gt;\n  daily_sales[[#This Row],[sales_price]]*daily_sales[[#ThisRow],[sales_quantity]]\n&lt;/calculatedColumnFormula&gt;\nNow we can see that open xml replaces [@[sales_price]] with daily_sales[[#This Row],[sales_price]] We must then use this syntax when writing formulas for dataTable\n\n## Because we want the `dataTable` formula to propagate down the entire column of the data\n## we can assign the formula by itself to any column and allow that single string to be repeated for each row.\n\n## creating example data\nexample_data &lt;-\n  data.frame(\n    sales_price = c(20, 30, 40),\n    COGS = c(5, 11, 13),\n    sales_quantity = c(1, 2, 3)\n  )\n\n## base R method\nexample_data$gross_profit       &lt;- \"daily_sales[[#This Row],[sales_price]] - daily_sales[[#This Row],[COGS]]\"\nexample_data$total_COGS        &lt;- \"daily_sales[[#This Row],[COGS]] * daily_sales[[#This Row],[sales_quantity]]\"\nexample_data$total_sales       &lt;- \"daily_sales[[#This Row],[sales_price]] * daily_sales[[#This Row],[sales_quantity]]\"\nexample_data$total_gross_profit &lt;- \"daily_sales[[#This Row],[total_sales]] - daily_sales[[#This Row],[total_COGS]]\"\nclass(example_data$gross_profit)       &lt;- c(class(example_data$gross_profit),       \"formula\")\nclass(example_data$total_COGS)        &lt;- c(class(example_data$total_COGS),          \"formula\")\nclass(example_data$total_sales)       &lt;- c(class(example_data$total_sales),         \"formula\")\nclass(example_data$total_gross_profit) &lt;- c(class(example_data$total_gross_profit), \"formula\")\n\n\nwb$\n  add_worksheet(\"Daily Sales\")$\n  add_data_table(\n    x           = example_data,\n    table_style = \"TableStyleMedium2\",\n    table_name  = \"daily_sales\"\n  )\n\nAnd if we open the workbook to view the table we created we can see that the formula has worked.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n1\nsales_price\nCOGS\nsales_quantity\ngross_profit\ntotal_COGS\ntotal_sales\ntotal_gross_profit\n\n\n2\n20\n5\n1\n15\n5\n20\n15\n\n\n3\n30\n11\n2\n19\n22\n60\n38\n\n\n4\n40\n13\n3\n27\n39\n120\n81\n\n\n\nWe can also see that it has replaced [#This Row] with @.\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\nB\nC\nD\nE\nF\nG\n\n\n\n1\nsales_price\nCOGS\nsales_quantity\ngross_profit\ntotal_COGS\ntotal_sales\ntotal_gross_profit\n\n\n2\n20\n5\n1\n=[@sales_price] - [@COGS]\n=[@COGS] * [@sales_quantity]\n=[@sales_price] * [@sales_quantity]\n=[@[total_sales]] - [@[total_COGS]]\n\n\n3\n30\n11\n2\n=[@sales_price] - [@COGS]\n=[@COGS] * [@sales_quantity]\n=[@sales_price] * [@sales_quantity]\n=[@[total_sales]] - [@[total_COGS]]\n\n\n4\n40\n13\n3\n=[@sales_price] - [@COGS]\n=[@COGS] * [@sales_quantity]\n=[@sales_price] * [@sales_quantity]\n=[@[total_sales]] - [@[total_COGS]]\n\n\n\nFor completion, the formula as we wrote it appears as;\n\n\n\n\n\n\n\n\nD\nE\nF\nG\n\n\n\ngross_profit\ntotal_COGS\ntotal_sales\ntotal_gross_profit\n\n\n=gross_profit[[#This Row],[sales_price]] - gross_profit[[#This Row],[COGS]]\n=gross_profit[[#This Row],[COGS]] * gross_profit[[#This Row],[sales_quantity]]\n=gross_profit[[#This Row],[sales_price]] * gross_profit[[#This Row],[sales_quantity]]\n=gross_profit[[#This Row],[total_sales]] - gross_profit[[#This Row],[total_COGS]]\n\n\n=gross_profit[[#This Row],[sales_price]] - gross_profit[[#This Row],[COGS]]\n=gross_profit[[#This Row],[COGS]] * gross_profit[[#This Row],[sales_quantity]]\n=gross_profit[[#This Row],[sales_price]] * gross_profit[[#This Row],[sales_quantity]]\n=gross_profit[[#This Row],[total_sales]] - gross_profit[[#This Row],[total_COGS]]\n\n\n=gross_profit[[#This Row],[sales_price]] - gross_profit[[#This Row],[COGS]]\n=gross_profit[[#This Row],[COGS]] * gross_profit[[#This Row],[sales_quantity]]\n=gross_profit[[#This Row],[sales_price]] * gross_profit[[#This Row],[sales_quantity]]\n=gross_profit[[#This Row],[total_sales]] - gross_profit[[#This Row],[total_COGS]]\n\n\n\n\n#### sum dataTable examples\nwb$add_worksheet(\"sum_examples\")\n\n### Note: dataTable formula do not need to be used inside of dataTables. dataTable formula are for referencing the data within the dataTable.\nsum_examples &lt;- data.frame(\n  description = c(\"sum_sales_price\", \"sum_product_Price_Quantity\"),\n  formula = c( \"\", \"\")\n)\n\nwb$add_data(x = sum_examples)\n\n# add formulas\nwb$add_formula(x = \"sum(daily_sales[[#Data],[sales_price]])\", dims = \"B2\")\nwb$add_formula(x = \"sum(daily_sales[[#Data],[sales_price]] * daily_sales[[#Data],[sales_quantity]])\", dims = \"B3\", array = TRUE)\n\n#### dataTable referencing\nwb$add_worksheet(\"dt_references\")\n\n### Adding the headers by themselves.\nwb$add_formula(\n  x = \"daily_sales[[#Headers],[sales_price]:[total_gross_profit]]\",\n  dims = \"A1:G1\",\n  array = TRUE\n)\n\n### Adding the raw data by reference and selecting them directly.\nwb$add_formula(\n  x = \"daily_sales[[#Data],[sales_price]:[total_gross_profit]]\",\n  start_row = 2,\n  dims = \"A2:G4\",\n  array = TRUE\n)\n# wb$open()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#footnotes",
    "href": "chapters/openxlsx2_formulas_manual.html#footnotes",
    "title": "\n7  Spreadsheet formulas\n",
    "section": "",
    "text": "this example was originally provided by @zykezero for openxlsx.↩︎",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Spreadsheet formulas</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html",
    "href": "chapters/openxlsx2_pivot_tables.html",
    "title": "\n8  Pivot tables\n",
    "section": "",
    "text": "8.1 Adding pivot tables\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = esoph)\n\ndf &lt;- wb_data(wb)\n\nwb$add_pivot_table(df, rows = \"agegp\", cols = \"tobgp\", data = c(\"ncontrols\"))\n\n# for visual comparison\npt &lt;- pivottabler::PivotTable$new()\npt$addData(esoph)\npt$addColumnDataGroups(\"tobgp\")\npt$addRowDataGroups(\"agegp\")\npt$defineCalculation(calculationName=\"ncontrols\", summariseExpression=\"sum(ncontrols)\")\npt$evaluatePivot()\npt\n#&gt;        0-9g/day  10-19  20-29  30+  Total  \n#&gt; 25-34        70     18     11   16    115  \n#&gt; 35-44       107     42     24   17    190  \n#&gt; 45-54        90     44     25    8    167  \n#&gt; 55-64        92     42     26    6    166  \n#&gt; 65-74        68     26     10    2    106  \n#&gt; 75+          20      6      3    2     31  \n#&gt; Total       447    178     99   51    775\n\nwb$add_data_table(dims = \"A14\", x = pt$asDataFrame(), row_names = TRUE)\n\nif (interactive()) wb$open()\nUnlike pivottabler the pivot tables in openxlsx2 are not evaluated. Therefore there is nothing in the sheet region A3:F11 and if you write something here, spreadsheet software will complain.1",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Pivot tables</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html#adding-pivot-tables",
    "href": "chapters/openxlsx2_pivot_tables.html#adding-pivot-tables",
    "title": "\n8  Pivot tables\n",
    "section": "",
    "text": "8.1.1 Filter, row, column, and data\nSimilar to pivot tables in Excel, it is possible to assign variables to the table dimensions filter, row, column, and data. It is not required to have all dimensions filled. You can assign each variable only once per dimension, but can combine multiple variables.\n\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = esoph)\n\ndf &lt;- wb_data(wb)\n\nwb$add_pivot_table(df, dims = \"A3\", rows = \"agegp\", cols = \"tobgp\", data = c(\"ncontrols\"))\nwb$add_pivot_table(df, dims = \"A13\", rows = \"agegp\", data = c(\"ncontrols\", \"ncases\"))\nwb$add_pivot_table(df, dims = \"A18\", rows = \"agegp\", cols = \"tobgp\", data = c(\"ncontrols\", \"ncases\"))\n\n\n\n\n\n\n\n\n\n\n8.1.2 Sorting\nUsing sort_item it is possible to order the pivot table. sort_item can take either integers or characters, the latter is beneficial in cases as below, where the variable you want to sort is a factor. Though, be aware that pivot table uses a different approach to distinct unique elements and that Berlin and BERLIN are identical to it. You can check for distinct cases with openxlsx2:::distinct().\n\ntbl_prueba_2 &lt;- data.frame(\n  var_1 = as.Date(rep(\n    c(\n      \"2023-02-01\", \"2023-03-01\", \"2023-04-01\", \"2023-05-01\", \"2023-06-01\",\n      \"2023-07-01\", \"2023-08-01\", \"2023-09-01\", \"2023-10-01\", \"2023-11-01\",\n      \"2023-12-01\", \"2024-01-01\", \"2024-02-01\", \"2024-03-01\"\n    ),\n    each = 2L\n  )),\n  var_2 = rep(2:15, each = 2L),\n  year = rep(c(2023, 2024), c(22L, 6L)),\n  month = ordered(\n    rep(\n      c(\n        \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\",\n        \"Jan\", \"Feb\", \"Mar\"\n      ),\n      each = 2L\n    ),\n    levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n  )\n)\n\n\nwb_1 &lt;- wb_workbook() |&gt;\n  wb_add_worksheet() |&gt;\n  wb_add_data(x = tbl_prueba_2)\n\ndf &lt;- wb_data(wb_1)\n\nwb_1 &lt;- wb_1 |&gt;\n  wb_add_pivot_table(\n    x = df,\n    cols = c(\"year\", \"month\"),\n    data = \"var_2\",\n    fun = \"sum\",\n    params = list(\n      sort_item = list(month = rev(levels(tbl_prueba_2$month)))\n    )\n  ) \n\nif (interactive()) wb_1$open()\n\n\n8.1.3 Aggregation functions\nThe default aggregation function is SUM, but others are possible as well: AVERAGE, COUNT, COUNTA, MAX, MIN, PRODUCT, STDEV, STDEVP, SUM, VAR, VARP. This is limited to functions available in the openxml specification. Each data variable can use a different function.\n\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = mtcars)\n\ndf &lt;- wb_data(wb)\n\nwb$add_pivot_table(df, dims = \"A1\", rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"))\nwb$add_pivot_table(df, dims = \"A10\", sheet = 2, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"), fun = \"count\")\nwb$add_pivot_table(df, dims = \"A20\", sheet = 2, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"), fun = \"average\")\nwb$add_pivot_table(df, dims = \"A30\", sheet = 2, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"), fun = c(\"sum\", \"average\"))\n\n\n\n\n\n\n\n\n\n\n8.1.4 Styling pivot tables\nThere is no real support for individual pivot table styles. Aside from the default style, it is possible to disable the style and to apply auto format styles (for various styles see annex G.3 - Built-in PivotTable AutoFormats of ECMA-376-1 (2016)). In the example below style id 4099 is applied, ids range from 4096 to 4117.\n\nwb &lt;- wb_workbook() %&gt;% \n  wb_add_worksheet(\"table\") %&gt;% \n  wb_add_worksheet(\"data\") %&gt;% \n  wb_add_data(x = mtcars)\n\ndf &lt;- wb_data(wb)\n\nwb &lt;- wb %&gt;% \n  \n  # pivot table without style\n  wb_add_pivot_table(\n    df, dims = \"A3\", sheet = \"table\",\n    rows = c(\"cyl\", \"am\"), cols = \"gear\", data = \"disp\",\n    fun = \"average\",\n    params = list(no_style = TRUE, numfmt = c(formatCode = \"##0.0\"))\n  ) %&gt;% \n  \n  # Applied a few params and use auto_format_id\n  wb_add_pivot_table(\n    df, dims = \"G3\", sheet = \"table\", \n    rows = c(\"cyl\", \"am\"), cols = \"vs\", data = \"disp\",\n    fun = \"average\",\n    params = list(\n      apply_alignment_formats    = TRUE,\n      apply_number_formats       = TRUE,\n      apply_border_formats       = TRUE,\n      apply_font_formats         = TRUE,\n      apply_pattern_formats      = TRUE,\n      apply_width_height_formats = TRUE,\n      auto_format_id             = 4099,\n      numfmt = c(formatCode = \"##0.0\")\n    )\n  )\n\nif (interactive()) wb$open()\n\n\n\n\n\n\n\n\n\nWith params it is possible to tweak many pivot table arguments such as params = list(col_header_caption = \"test caption\"). This way it is also possible to apply built in pivot table styles. The default is PivotStyleLight16 (for more built in styles see G.1 Built-in Table Styles of ECMA-376-1 (2016)).\n\nwb &lt;- wb_workbook()$\n  add_worksheet(\"table\")$\n  add_worksheet(\"data\")$add_data(x = mtcars)\n\ndf &lt;- wb_data(wb)\n\nwb$add_pivot_table(df, sheet = \"table\", dims = \"A1\", rows = \"cyl\", cols = \"gear\", data = \"disp\", params = list(table_style = \"TableStyleMedium23\"))\nwb$add_pivot_table(df, sheet = \"table\", dims = \"A10\", rows = \"cyl\", cols = \"gear\", data = \"disp\", params = list(table_style = \"TableStyleLight19\"))\nwb$add_pivot_table(df, sheet = \"table\", dims = \"A19\", rows = \"cyl\", cols = \"gear\", data = \"disp\", params = list(table_style = \"TableStyleDark11\"))\n\nwb$add_pivot_table(df, sheet = \"table\", dims = \"G1\", rows = \"cyl\", cols = \"gear\", data = \"disp\", params = list(table_style = \"PivotStyleMedium28\"))\nwb$add_pivot_table(df, sheet = \"table\", dims = \"G10\", rows = \"cyl\", cols = \"gear\", data = \"disp\", params = list(table_style = \"PivotStyleMedium13\"))\nwb$add_pivot_table(df, sheet = \"table\", dims = \"G19\", rows = \"cyl\", cols = \"gear\", data = \"disp\", params = list(table_style = \"PivotStyleDark20\"))\n\nif (interactive()) wb$open()\n\n\n\n\n\n\n\n\n\n\n8.1.5 Pivot table dims\n\nIt is possible to use dims without end row. This way the entire column is used as input. This obviously is slower than using a fixed range, because the wb_data() object will contain each possible row. This is\n\n# original pivot table as reference\npt &lt;- pivottabler::PivotTable$new()\npt$addData(pivottabler::bhmtrains) \npt$addColumnDataGroups(\"TrainCategory\") \npt$addRowDataGroups(\"TOC\", \n                    outlineBefore=list(isEmpty=FALSE, groupStyleDeclarations=list(color=\"blue\")), \n                    outlineTotal=list(isEmpty=FALSE, groupStyleDeclarations=list(color=\"blue\"))) \npt$addRowDataGroups(\"PowerType\", addTotal=FALSE) \npt$defineCalculation(calculationName=\"TotalTrains\", summariseExpression=\"n()\")\n\n\n\n\n\n\n\n\n\n\n# use A:P\nwb &lt;- wb_workbook()$add_worksheet()$add_data(x = pivottabler::bhmtrains, na.strings = NULL)\ndf &lt;- wb_data(wb, dims = \"A:P\")\n\n# use TrainCategory on column and data\nwb$add_pivot_table(\n  df, \n  rows = c(\"TOC\", \"PowerType\"),\n  cols = \"TrainCategory\",\n  data = \"TrainCategory\",\n  fun = \"count\"\n)\n\nif (interactive()) wb$open()\n\n\n\n\n\n\n\n\n\n\n8.1.6 Using number formats\n\n## Pivot table example 1\nwb &lt;- wb_workbook() %&gt;% wb_add_worksheet() %&gt;% wb_add_data(x = mtcars, inline_strings = F)\n\nwb$add_numfmt(dims = wb_dims(x = mtcars, cols = \"disp\"), numfmt = \"$ #,###\")\n\ndf &lt;- wb_data(wb)\n\n# basic pivot table with filter, rows, cols and data\nwb$add_pivot_table(\n  df,\n  rows = \"cyl\", cols = \"gear\",\n  data = c(\"disp\", \"hp\"),\n  fun = c(\"sum\", \"count\"),\n  params = list(\n    numfmt = c(formatCode = \"$ ###\", formatCode = \"#\")\n  ))",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Pivot tables</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html#adding-slicers-to-pivot-tables",
    "href": "chapters/openxlsx2_pivot_tables.html#adding-slicers-to-pivot-tables",
    "title": "\n8  Pivot tables\n",
    "section": "\n8.2 Adding slicers to pivot tables",
    "text": "8.2 Adding slicers to pivot tables\nSince openxlsx2 release 1.1 it is possible to add slicers to pivot tables created with wb_add_pivot_tables(). For this to work you have to provide a name for a pivot table name you are going to add and make sure that the slicer variable is actually ‘activated’ in the pivot table. Adding slicers to loaded pivot tables is not possible and the creation of slicers needs to go hand in hand with a pivot table.\nIt is possible to apply slicer styles with params = list(style = \"SlicerStyleLight2\")\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet() %&gt;% wb_add_data(x = mtcars)\n\ndf &lt;- wb_data(wb, sheet = 1)\n\nwb$\n  add_pivot_table(\n    df, dims = \"A3\", slicer = \"vs\", rows = \"cyl\", cols = \"gear\", data = \"disp\",\n    pivot_table = \"mtcars\"\n  )$\n  add_slicer(x = df, dims = \"B7:D9\", slicer = \"vs\", pivot_table = \"mtcars\",\n             params = list(edit_as = \"twoCell\", style = \"SlicerStyleLight2\"))\n\nif (interactive()) wb$open()\n\nIt is possible to tweak the number of columns in a slicer using columnCount and to add a caption and change the sorting order to descending.\n\nwb &lt;- wb_workbook() %&gt;%\n  ### Sheet 1\n  wb_add_worksheet() %&gt;%\n  wb_add_data(x = mtcars)\n\ndf &lt;- wb_data(wb, sheet = 1)\n\nvarname &lt;- c(\"vs\", \"drat\")\n\n### Sheet 2\nwb$\n  # first pivot\n  add_pivot_table(\n    df, dims = \"A3\", slicer = varname, rows = \"cyl\", cols = \"gear\", data = \"disp\",\n    pivot_table = \"mtcars\"\n  )$\n  add_slicer(x = df, sheet = current_sheet(), slicer = \"vs\", pivot_table = \"mtcars\")$\n  add_slicer(x = df, dims = \"B18:D24\", sheet = current_sheet(), slicer = \"drat\", pivot_table = \"mtcars\",\n             params = list(columnCount = 5))$\n  # second pivot\n  add_pivot_table(\n    df, dims = \"G3\", sheet = current_sheet(), slicer = varname, rows = \"gear\", cols = \"carb\", data = \"mpg\",\n    pivot_table = \"mtcars2\"\n  )$\n  add_slicer(x = df, dims = \"G12:I16\", slicer = \"vs\", pivot_table = \"mtcars2\",\n             params = list(sortOrder = \"descending\", caption = \"Wow!\"))\n\n### Sheet 3\nwb$\n  add_pivot_table(\n    df, dims = \"A3\", slicer = varname, rows = \"gear\", cols = \"carb\", data = \"mpg\",\n    pivot_table = \"mtcars3\"\n  )$\n  add_slicer(x = df, dims = \"A12:D16\", slicer = \"vs\", pivot_table = \"mtcars3\")\n  \nif (interactive()) wb$open()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Pivot tables</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html#choosing-variable-filters",
    "href": "chapters/openxlsx2_pivot_tables.html#choosing-variable-filters",
    "title": "\n8  Pivot tables\n",
    "section": "\n8.3 Choosing variable filters",
    "text": "8.3 Choosing variable filters\nUsing the choose param argument it is possible to select subsets of the data. The code looks like this: choose = c(agegp = 'x &gt; \"25-34\"'). The variable name as seen in the wb_data() object, x is mandatory and some expression that R understands. This can be something like %in%, ==, &lt;, &gt;, or !=.\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"table\") %&gt;%\n  wb_add_worksheet(\"data\") %&gt;%\n  wb_add_data(x = datasets::esoph)\n\ndf &lt;- wb_data(wb)\n\n# add a pivot table and a slicer and preselect\n# a few cases and style it a bit\nwb &lt;- wb %&gt;%\n  wb_add_pivot_table(\n    df, dims = \"A3\", sheet = \"table\",\n    rows = \"agegp\", cols = \"tobgp\", data = \"ncases\",\n    slicer = \"alcgp\", pivot_table = \"pt1\",\n    param = list(\n      show_data_as = c(\"percentOfRow\"),\n      numfmt = c(formatCode = \"0.0%\"),\n      compact = FALSE, outline = FALSE, compact_data = FALSE,\n      row_grand_totals = FALSE, col_grand_totals = FALSE,\n      choose = c(agegp = 'x &gt; \"25-34\"')\n    )\n  ) %&gt;% \n  wb_add_slicer(\n    x = df, dims = \"B14:D18\", \n    slicer = \"alcgp\", pivot_table = \"pt1\", \n    param = list(\n      columnCount = 2,\n      choose = c(alcgp = 'x %in% c(\"40-79\", \"80-119\")')\n    )\n  )\n\nif (interactive()) wb$open()",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Pivot tables</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html#final-remarks",
    "href": "chapters/openxlsx2_pivot_tables.html#final-remarks",
    "title": "\n8  Pivot tables\n",
    "section": "\n8.4 Final remarks",
    "text": "8.4 Final remarks\nAs of now it is not possible to add charts to pivot tables. This would require pivot table evaluation to construct the wb_data() object to use for and access to the area where the pivot table is stored on the sheet.\nIt is always a good idea to check that the constructed pivot table and the expected pivot table match. Either construct the pivot table manually or as shown here via pivottabler or maybe with either data.table or dplyr. It is a little tricky for openxlsx2 to check if the pivot table works, when we have no real way to validate that it does.\n\n\n\n\nECMA-376-1. 2016. Office Open XML File Formats — Fundamentals and Markup Language Reference.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Pivot tables</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html#footnotes",
    "href": "chapters/openxlsx2_pivot_tables.html#footnotes",
    "title": "\n8  Pivot tables\n",
    "section": "",
    "text": "It should be possible to integrate results similar to pivottabler into wb_add_pivot_table() so that you should be able to have evaluated pivot tables straight ahead. Pull requests are welcome.↩︎",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Pivot tables</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_data_validation.html",
    "href": "chapters/openxlsx2_data_validation.html",
    "title": "\n9  Data Validation\n",
    "section": "",
    "text": "9.1 Checking numeric ranges and text lengths\nIn the next two code snippets we are going to check for a specific type of data, if a condition defined by operator is met for a selection or range of values. We construct a workbook that will be filled with four sheets of data tables and data validation for the workbook.\nwb &lt;- wb_workbook()$\n  add_worksheet(\"Sheet 1\")$\n  add_data_table(x = iris)$\n  # whole numbers are fine\n  add_data_validation(dims = \"A2:C151\", type = \"whole\",\n                      operator = \"between\", value = c(1, 9)\n  )$\n  # text width 7-9 is fine\n  add_data_validation(dims = \"E2:E151\", type = \"textLength\",\n                      operator = \"between\", value = c(7, 9)\n  )\nIn the screenshot below, the green flag in the top left corner indicates a warning thrown by the data validation rule implemented.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Validation</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_data_validation.html#date-and-time-cell-validation",
    "href": "chapters/openxlsx2_data_validation.html#date-and-time-cell-validation",
    "title": "\n9  Data Validation\n",
    "section": "\n9.2 Date and Time cell validation",
    "text": "9.2 Date and Time cell validation\nIn the code below we use a new data operator greaterThanOrEqual, all operators can be found in the documentation for wb_add_data_validation(). Here we add checks for a specific date and a range of timestamps that are allowed.\n\nwb$\n  add_worksheet(\"Sheet 2\")$\n  add_data_table(x = df)$\n  # date &gt;= 2016-01-01 is fine\n  add_data_validation(dims = \"A2:A12\", type = \"date\",\n                      operator = \"greaterThanOrEqual\", value = as.Date(\"2016-01-01\")\n  )$\n  # a few timestamps are fine\n  add_data_validation(dims = \"B2:B12\", type = \"time\",\n                      operator = \"between\", value = df$t[c(4, 8)]\n  )\n\nThere are many warnings in here too.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Validation</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_data_validation.html#validate-list-validate-inputs-on-one-sheet-with-another",
    "href": "chapters/openxlsx2_data_validation.html#validate-list-validate-inputs-on-one-sheet-with-another",
    "title": "\n9  Data Validation\n",
    "section": "\n9.3 validate list: validate inputs on one sheet with another",
    "text": "9.3 validate list: validate inputs on one sheet with another\nIn the code below we create a sample list from the iris dataset on Sheet 4 and reference this a list options for column A on Sheet 3. Our references do not have to be from the same dataset, it can be anything else. This helps, if you do not want to store the values in the wb_add_data_validation() step and or want to be able to quickly adjust the possible values.\n\nwb$\n  add_worksheet(\"Sheet 3\")$\n  add_data_table(x = iris[1:30, ])$\n  add_worksheet(\"Sheet 4\")$\n  add_data(x = sample(iris$Sepal.Length, 10))$\n  add_data_validation(\"Sheet 3\", dims = \"A2:A31\", type = \"list\",\n                      value = \"'Sheet 4'!$A$1:$A$10\")\n\nBelow is the drop down list and the input used to populate it.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Validation</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_data_validation.html#validate-list-validate-inputs-with-values",
    "href": "chapters/openxlsx2_data_validation.html#validate-list-validate-inputs-with-values",
    "title": "\n9  Data Validation\n",
    "section": "\n9.4 validate list: validate inputs with values",
    "text": "9.4 validate list: validate inputs with values\nIn the code below we create drop down lists for values directly passed to wb_add_data_validation(). In the upper cell range options \"O1\" and \"O2\" are available, in the lower cell range \"O2\" and \"O3\". Using values directly is helpful if there are only a few values and it is not required to provide a list of values on a spreadsheet.\n\n  wb &lt;- wb_workbook()$\n    add_worksheet()$add_data(x = iris[1:30, ])$\n    add_worksheet()$add_data(sheet = 2, x = sample(iris$Sepal.Length, 10))$\n    add_data_validation(sheet = 1, dims = \"A2:A11\", type = \"list\", value = '\"O1,O2\"')$\n    add_data_validation(sheet = 1, dims = \"A12:A21\", type = \"list\", value = '\"O2,O3\"')",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Validation</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_data_validation.html#examples-combining-data-validation-and-formulas",
    "href": "chapters/openxlsx2_data_validation.html#examples-combining-data-validation-and-formulas",
    "title": "\n9  Data Validation\n",
    "section": "\n9.5 Examples combining data validation and formulas",
    "text": "9.5 Examples combining data validation and formulas\n\n9.5.1 Example 1: hyperlink to selected value\n\n  formula_old &lt;- '=HYPERLINK(\"#Tab_1!\" &amp; CELL(\"address\", INDEX(C1:F1, MATCH(A1, C1:F1, 0))), \"Go to the selected column\")'\n  formula_new &lt;- '=HYPERLINK(\"#Tab_1!\" & CELL(\"address\", INDEX(C1:F1, MATCH(A1, C1:F1, 0))), \"Go to the selected column\")'\n\n  wb &lt;- wb_workbook()$\n    add_worksheet(\"Tab_1\", zoom = 80, gridLines = FALSE)$\n    add_data(x = rbind(2016:2019), dims = \"C1:F1\", colNames = FALSE)$\n    add_data(x = 2017, dims = \"A1\", colNames = FALSE)$\n    add_data_validation(dims = \"A1\", type = \"list\", value = '\"2016,2017,2018,2019\"')$\n    add_formula(dims = \"B1\", x = formula_old)$\n    add_formula(dims = \"B2\", x = formula_new)\n\n\n9.5.2 Example 2: create hyperlink to github\n\n  wb &lt;- wb_workbook()$\n    add_worksheet(\"Tab_1\", zoom = 80, gridLines = FALSE)$\n    add_data(dims = \"C1:F1\", x = rbind(2016:2019), colNames = FALSE)$\n    add_data(x = 2017, startCol = 1, startRow = 1, colNames = FALSE)$\n    add_data_validation(dims = \"A1\", type = \"list\", value = '\"2016,2017,2018,2019\"')$\n    add_formula(dims = \"B1\", x = '=HYPERLINK(\"#Tab_1!\" & CELL(\"address\", INDEX(C1:F1, MATCH(A1, C1:F1, 0))), \"Go to the selected column\")')$\n    add_formula(dims = \"B2\", x = '=IF(2017 = VALUE(A1), HYPERLINK(\"github.com\",\"github.com\"), A1)')",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Data Validation</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_form_control.html",
    "href": "chapters/openxlsx2_form_control.html",
    "title": "\n10  Form control\n",
    "section": "",
    "text": "wb &lt;- wb_workbook()$\n    # Checkbox\n    add_worksheet()$\n    add_form_control(dims = \"B2\")$\n    add_form_control(dims = \"B3\", text = \"A text\")$\n    add_data(dims = \"A4\", x = 0, colNames = FALSE)$\n    add_form_control(dims = \"B4\", link = \"A4\")$\n    add_data(dims = \"A5\", x = TRUE, colNames = FALSE)$\n    add_form_control(dims = \"B5\", range = \"'Sheet 1'!A5\", link = \"B5\")$\n    # Radio\n    add_worksheet()$\n    add_form_control(dims = \"B2\", type = \"Radio\")$\n    add_form_control(dims = \"B3\", type = \"Radio\", text = \"A text\")$\n    add_data(dims = \"A4\", x = 0, colNames = FALSE)$\n    add_form_control(dims = \"B4\", type = \"Radio\", link = \"A4\")$\n    add_data(dims = \"A5\", x = 1, colNames = FALSE)$\n    add_form_control(dims = \"B5\", type = \"Radio\")$\n    # Drop\n    add_worksheet()$\n    add_form_control(dims = \"B2\", type = \"Drop\")$\n    add_form_control(dims = \"B3\", type = \"Drop\", text = \"A text\")$\n    add_data(dims = \"A4\", x = 0, colNames = FALSE)$\n    add_form_control(dims = \"B4\", type = \"Drop\", link = \"A1\", range = \"D4:D15\")$\n    add_data(dims = \"A5\", x = 1, colNames = FALSE)$\n    add_form_control(dims = \"B5\", type = \"Drop\", link = \"'Sheet 3'!D1:D26\", range = \"A1\")$\n    add_data(dims = \"D1\", x = letters)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Form control</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_clone_and_copy.html",
    "href": "chapters/openxlsx2_clone_and_copy.html",
    "title": "\n11  Cloning and copying\n",
    "section": "",
    "text": "11.1 Copying cells\nIt is possible to copy cells into different regions of the worksheet using wb_copy_cells(). There are three ways to copy cells: (1) as is, including styles, (2) as value replacing all formulas and (3) as reference to the cell origin. This can be seen in the following image, the transposed cell contains a formula pointing to the original cell.\nmm &lt;- matrix(1:6, 2)\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = mm, col_names = FALSE)$\n  add_fill(dims = \"A1:C1\", color = wb_color(theme = 5))$\n  add_fill(dims = \"A2:C2\", color = wb_color(theme = 3))$\n  add_fill(dims = \"A3:C3\", color = wb_color(theme = 4))\n\ndat &lt;- wb_data(wb, dims = \"A1:C3\", col_names = FALSE)\n\nwb$copy_cells(dims = \"E1\", data = dat)\nwb$copy_cells(dims = \"E5\", data = dat, as_value = TRUE)\nwb$copy_cells(dims = \"E9\", data = dat, as_ref   = TRUE)\n\nwb$copy_cells(dims = \"I1\", data = dat, transpose = TRUE)\nwb$copy_cells(dims = \"I5\", data = dat, transpose = TRUE, as_value = TRUE)\nwb$copy_cells(dims = \"I9\", data = dat, transpose = TRUE, as_ref   = TRUE)\n\nif (interactive()) wb$open()",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Cloning and copying</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_clone_and_copy.html#cloning-worksheets",
    "href": "chapters/openxlsx2_clone_and_copy.html#cloning-worksheets",
    "title": "\n11  Cloning and copying\n",
    "section": "\n11.2 Cloning worksheets",
    "text": "11.2 Cloning worksheets\nSometimes it is not enough to copy a cell range, sometimes you need to copy entire worksheets. This can be done using wb_clone_worksheet(). You can clone a worksheet in a workbook, but also across workbooks, though the first option is simpler and might provide more features. Cloning worksheets around that contain (pivot) tables and slicers for instance might be impossible and some other features of the workbook might also not be present. In addition it is not guaranteed that a clone will look identical to the original worksheet if relative theme colors are used. As always, be careful if you use this feature and test that it works, before you start cloning production worksheets.\n\nfl &lt;- system.file(\"extdata\", \"oxlsx2_sheet.xlsx\", package = \"openxlsx2\")\nwb_from &lt;- wb_load(fl)\n\n# clone worksheet from SUM to NOT_SUM\nwb_from$clone_worksheet(old = \"SUM\", new = \"NOT_SUM\")\n\n# clone worksheet across workbooks including styles and shared strings\nwb$clone_worksheet(old = \"SUM\", new = \"SUM\", from = wb_from)",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Cloning and copying</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_upgrade_from_openxlsx.html",
    "href": "chapters/openxlsx2_upgrade_from_openxlsx.html",
    "title": "\n12  Upgrade from openxlsx\n",
    "section": "",
    "text": "12.1 Basic read and write functions\nWelcome to the openxlsx2 update vignette. In this vignette we will take some common code examples from openxlsx and show you how similar results can be replicated in openxlsx2. Thank you for taking a look, and let’s get started. While previous openxlsx functions used the . in function calls, as well as camelCase, we have tried to switch to snake_case (this is still a work in progress, there may still be function arguments that use camelCase).",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Upgrade from `openxlsx`</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-read-and-write-functions",
    "href": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-read-and-write-functions",
    "title": "\n12  Upgrade from openxlsx\n",
    "section": "",
    "text": "12.1.1 Read xlsx or xlsm files\nThe basic read function changed from read.xlsx to read_xlsx. Using a default xlsx file included in the package:\n\nfile &lt;- system.file(\"extdata\", \"openxlsx2_example.xlsx\", package = \"openxlsx2\")\n\nThe old syntax looked like this:\n\n# read in openxlsx\nopenxlsx::read.xlsx(xlsxFile = file)\n\nThis has changed to this:\n\n# read in openxlsx2\nopenxlsx2::read_xlsx(file = file)\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\nAs you can see, we return the spreadsheet return codes (e.g., #NUM) in openxlsx2. Another thing to see above, we return the cell row as rowname for the data frame returned. openxlsx2 should return a data frame of the selected size, even if it empty. If you preferred openxlsx::readWorkbook() this has become wb_read(). All of these are wrappers for the newly introduced function wb_to_df() which provides the most options. read_xlsx() and wb_read() were created for backward comparability.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Upgrade from `openxlsx`</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_upgrade_from_openxlsx.html#write-xlsx-files",
    "href": "chapters/openxlsx2_upgrade_from_openxlsx.html#write-xlsx-files",
    "title": "\n12  Upgrade from openxlsx\n",
    "section": "\n12.2 Write xlsx files",
    "text": "12.2 Write xlsx files\nBasic writing in openxlsx2 behaves identical to openxlsx. Though be aware that overwrite is an optional parameter in openxlsx2 and just like in other functions like base::write.csv() if you write onto an existing file name, this file will be replaced.\nSetting the output to some temporary xlsx file\n\noutput &lt;- temp_xlsx()\n\nThe previous write function looks like this:\n\n# write in openxlsx\nopenxlsx::write.xlsx(iris, file = output, colNames = TRUE)\n\nThe new function looks quite similar:\n\n# write in openxlsx2\nopenxlsx2::write_xlsx(iris, file = output, col_names = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Upgrade from `openxlsx`</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-workbook-functions",
    "href": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-workbook-functions",
    "title": "\n12  Upgrade from openxlsx\n",
    "section": "\n12.3 Basic workbook functions",
    "text": "12.3 Basic workbook functions\nWorkbook functions have been renamed to begin with wb_ there are plenty of these in the package, therefore looking at the man pages seems to be the fastest way. Yet, it all begins with loading the workbook.\n\n12.3.1 Loading a workbook\nA major feature in openxlsx are workbooks. Obviously they remain a central piece in openxlsx2. Previous you would load them with:\n\nwb &lt;- openxlsx::loadWorkbook(file = file)\n\nIn openxlsx2 loading was changed to:\n\nwb &lt;- wb_load(file = file)\n\nThere are plenty of functions to interact with workbooks and we will not describe every single one here. A detailed list can be found over at our references\n\n12.3.2 Styles\nOne of the biggest user facing change was the removal of the stylesObject. In the following section we use code from openxlsx::addStyle()\n\n# openxlsx\n## Create a new workbook\nwb &lt;- createWorkbook(creator = \"My name here\")\naddWorksheet(wb, \"Expenditure\", gridLines = FALSE)\nwriteData(wb, sheet = 1, USPersonalExpenditure, rowNames = TRUE)\n\n## style for body\nbodyStyle &lt;- createStyle(border = \"TopBottom\", borderColor = \"#4F81BD\")\naddStyle(wb, sheet = 1, bodyStyle, rows = 2:6, cols = 1:6, gridExpand = TRUE)\n\n## set column width for row names column\nsetColWidths(wb, 1, cols = 1, widths = 21)\n\nIn openxlsx2 the same code looks something like this:\n\n# openxlsx2 chained\nborder_color &lt;- wb_color(hex = \"4F81BD\")\nwb &lt;- wb_workbook(creator = \"My name here\")$\n  add_worksheet(\"Expenditure\", grid_lines = FALSE)$\n  add_data(x = USPersonalExpenditure, row_names = TRUE)$\n  add_border( # add the outer and inner border\n    dims = \"A1:F6\",\n    top_border = \"thin\", top_color = border_color,\n    bottom_border = \"thin\", bottom_color = border_color,\n    inner_hgrid = \"thin\", inner_hcolor = border_color,\n    left_border = \"\", right_border = \"\"\n  )$\n  set_col_widths( # set column width\n    cols = 1:6,\n    widths = c(20, rep(10, 5))\n  )$ # remove the value in A1\n  add_data(dims = \"A1\", x = \"\")\n\nThe code above uses chaining. If you prefer piping, we provide the chained functions with the prefix wb_ so wb_add_worksheet(), wb_add_data(), wb_add_border() and wb_set_col_widths() would be the functions to use with pipes %&gt;% or |&gt;.\nWith pipes the code from above becomes\n\n# openxlsx2 with pipes\nborder_color &lt;- wb_color(hex = \"4F81BD\")\nwb &lt;- wb_workbook(creator = \"My name here\") %&gt;%\n  wb_add_worksheet(sheet = \"Expenditure\", grid_lines = FALSE) %&gt;%\n  wb_add_data(x = USPersonalExpenditure, row_names = TRUE) %&gt;%\n  wb_add_border( # add the outer and inner border\n    dims = \"A1:F6\",\n    top_border = \"thin\", top_color = border_color,\n    bottom_border = \"thin\", bottom_color = border_color,\n    inner_hgrid = \"thin\", inner_hcolor = border_color,\n    left_border = \"\", right_border = \"\"\n  ) %&gt;%\n  wb_set_col_widths( # set column width\n    cols = 1:6,\n    widths = c(20, rep(10, 5))\n  ) %&gt;% # remove the value in A1\n  wb_add_data(dims = \"A1\", x = \"\")\n\nBe aware that chains modify an object in place and pipes do not.\n\n# openxlsx2\nwbp &lt;- wb_workbook() %&gt;% wb_add_worksheet()\nwbc &lt;- wb_workbook()$add_worksheet()\n\n# need to assign wbp\nwbp &lt;- wbp %&gt;% wb_add_data(x = iris)\nwbc$add_data(x = iris)\n\nYou can re-use styles with wb_get_cell_style() and wb_set_cell_style(). Abandoning stylesObject in openxlsx2 has the huge benefit that we can import and export a spreadsheet without changing any cell style. It is still possible to modify a cell style with wb_add_border(), wb_add_fill(), wb_add_font() and wb_add_numfmt().\nAdditional examples regarding styles can be found in the styles vignette.\n\n12.3.3 Conditional formatting\nSee vignette(\"conditional-formatting\") for extended examples on formatting.\nHere is a minimal example:\n\n# openxlsx2 with chains\nwb &lt;- wb_workbook()$\n  add_worksheet(\"a\")$\n  add_data(x = 1:4, col_names = FALSE)$\n  add_conditional_formatting(dims = \"A1:A4\", rule = \"&gt;2\")\n\n# openxlsx2 with pipes\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"a\") %&gt;%\n  wb_add_data(x = 1:4, col_names = FALSE) %&gt;%\n  wb_add_conditional_formatting(dims = \"A1:A4\", rule = \"&gt;2\")\n\n\n12.3.4 Data validation\nSimilarly, data validation has been updated and improved. This openxlsx code for data validation\n\n# openxlsx\nwb &lt;- createWorkbook()\naddWorksheet(wb, \"Sheet 1\")\nwriteDataTable(wb, 1, x = iris[1:30, ])\ndataValidation(wb, 1,\n  col = 1:3, rows = 2:31, type = \"whole\",\n  operator = \"between\", value = c(1, 9)\n)\n\nlooks in openxlsx2 something like this:\n\n# openxlsx2 with chains\nwb &lt;- wb_workbook()$\n  add_worksheet(\"Sheet 1\")$\n  add_data_table(1, x = iris[1:30, ])$\n  add_data_validation(1,\n    dims = wb_dims(rows = 2:31, cols = 1:3),\n    # alternatively, dims can also be \"A2:C31\" if you know the span in your Excel workbook.\n    type = \"whole\",\n    operator = \"between\",\n    value = c(1, 9)\n  )\n\n# openxlsx2 with pipes\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"Sheet 1\") %&gt;%\n  wb_add_data_table(1, x = iris[1:30, ]) %&gt;%\n  wb_add_data_validation(\n    sheet = 1,\n    dims = \"A2:C31\", # alternatively, dims = wb_dims(rows = 2:31, cols = 1:3)\n    type = \"whole\",\n    operator = \"between\",\n    value = c(1, 9)\n  )\n\n\n12.3.5 Saving\nSaving has been switched from saveWorbook() to wb_save() and opening a workbook has been switched from openXL() to wb_open().",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Upgrade from `openxlsx`</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_extending.html",
    "href": "chapters/openxlsx2_extending.html",
    "title": "\n13  Extending openxlsx2\n",
    "section": "",
    "text": "13.1 msoc - Encrypting / Decrypting workbooks\nYou might want to look at msoc (Garbuszus 2023) for openxml file level encryption/decryption.\nlibrary(msoc)\n\nxlsx &lt;- temp_xlsx()\n\n# let us write some worksheet\nwb_workbook()$add_worksheet()$add_data(x = mtcars)$save(xlsx)\n\n# now we can encrypt it\nencrypt(xlsx, xlsx, pass = \"msoc\")\n#&gt; [1] \"/tmp/Rtmpwsg36d/temp_xlsx_203e6386f1fe.xlsx\"\n\n# the file is encrypted, we can not read it\ntry(wb &lt;- wb_load(xlsx))\n#&gt; Error : Unable to open and load file:  /tmp/Rtmpwsg36d/temp_xlsx_203e6386f1fe.xlsx\n\n# we have to decrypt it first\ndecrypt(xlsx, xlsx, pass = \"msoc\")\n#&gt; [1] \"/tmp/Rtmpwsg36d/temp_xlsx_203e6386f1fe.xlsx\"\n\n# now we can load it again\nwb_load(xlsx)$to_df() %&gt;% head()\n#&gt;    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; 2 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#&gt; 3 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; 4 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; 5 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; 6 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; 7 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Extending `openxlsx2`</span>"
    ]
  },
  {
    "objectID": "chapters/openxlsx2_extending.html#flexlsx---exporting-flextable-to-workbooks",
    "href": "chapters/openxlsx2_extending.html#flexlsx---exporting-flextable-to-workbooks",
    "title": "\n13  Extending openxlsx2\n",
    "section": "\n13.2 flexlsx - Exporting flextable to workbooks",
    "text": "13.2 flexlsx - Exporting flextable to workbooks\nUsing flexlsx (Heidler 2024) you can extend openxlsx2 to write flextable objects (Gohel and Skintzos 2023) to spreadsheets. Various styling options are supported. A detailed description how to create flextables is given in the flextable book (a link is in the bibliography).\n\nlibrary(flexlsx)\n\nwb &lt;- wb_workbook()$add_worksheet(\"mtcars\", grid_lines = FALSE)\n\n# Create a flextable and an openxlsx2 workbook\nft &lt;- flextable::as_flextable(table(mtcars[2:5 , 1:2]))\nft\n\n# add the flextable ft to the workbook, sheet \"mtcars\"\n# offset the table to cell 'C2'\nwb &lt;- flexlsx::wb_add_flextable(wb, \"mtcars\", ft, dims = \"C2\")\n\nif (interactive()) wb$open()\n\n\n\n\n\nThe flextable written as xlsx file and as image\n\n\n\n\n\n\n\nGarbuszus, Jan Marvin. 2023. Msoc: Encrypt and Decrypt of Office Open Xml Files. https://janmarvin.github.io/msoc/.\n\n\nGohel, David, and Panagiotis Skintzos. 2023. Flextable: Functions for Tabular Reporting. https://ardata-fr.github.io/flextable-book/.\n\n\nHeidler, Tobias. 2024. Flexlsx: Exporting ’Flextable’ to ’Xlsx’ Files. https://github.com/pteridin/flexlsx.",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Extending `openxlsx2`</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Allen, Michael. 2023. Readxlsb: Read ’Excel’ Binary (.xlsb)\nWorkbooks. https://CRAN.R-project.org/package=readxlsb.\n\n\nBarbone, Jordan Mark, and Jan Marvin Garbuszus. 2024. Openxlsx2:\nRead, Write and Edit ’Xlsx’ Files. https://janmarvin.github.io/openxlsx2/.\n\n\nChang, Winston. 2021. R6: Encapsulated Classes with Reference\nSemantics. https://CRAN.R-project.org/package=R6.\n\n\nDragulescu, Adrian, and Cole Arendt. 2023. Xlsx: Read, Write, Format\nExcel 2007 and Excel 97/2000/XP/2003 Files. https://CRAN.R-project.org/package=xlsx.\n\n\nECMA-376-1. 2016. Office Open XML File Formats — Fundamentals and\nMarkup Language Reference.\n\n\nEddelbuettel, Dirk, and Romain François. 2011. “Rcpp:\nSeamless R and C++ Integration.”\nJournal of Statistical Software 40 (8): 1–18. https://doi.org/10.18637/jss.v040.i08.\n\n\nGarbuszus, Jan Marvin. 2023. Msoc: Encrypt and Decrypt of Office\nOpen Xml Files. https://janmarvin.github.io/msoc/.\n\n\nGarmonsway, Duncan. 2022. Tidyxl: Read Untidy Excel Files. https://CRAN.R-project.org/package=tidyxl.\n\n\nGohel, David, and Panagiotis Skintzos. 2023. Flextable: Functions\nfor Tabular Reporting. https://ardata-fr.github.io/flextable-book/.\n\n\nHeidler, Tobias. 2024. Flexlsx: Exporting ’Flextable’ to ’Xlsx’\nFiles. https://github.com/pteridin/flexlsx.\n\n\nKapoulkine, Arseny. 2006-2023. Pugixml. https://pugixml.org.\n\n\nOoms, Jeroen. 2023. Writexl: Export Data Frames to Excel ’Xlsx’\nFormat. https://CRAN.R-project.org/package=writexl.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. Openxlsx: Read,\nWrite and Edit Xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchwartz, Marc. 2022. WriteXLS: Cross-Platform Perl Based r Function\nto Create Excel 2003 (XLS) and Excel 2007 (XLSX) Files. https://CRAN.R-project.org/package=WriteXLS.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. Readxl: Read Excel\nFiles. https://CRAN.R-project.org/package=readxl.",
    "crumbs": [
      "References"
    ]
  }
]