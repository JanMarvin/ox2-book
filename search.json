[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The openxlsx2 book",
    "section": "",
    "text": "Preface\nThis is a work in progress book describing the features of openxlsx2 (Barbone and Garbuszus 2023). Having written a book before, I never imagined to do this again and therefore I shall not do it. But still I consider it a nice addition to have something more flexible as our vignettes.\nThis manual was compiled using:\n\nR.version\n\n               _                           \nplatform       x86_64-pc-linux-gnu         \narch           x86_64                      \nos             linux-gnu                   \nsystem         x86_64, linux-gnu           \nstatus                                     \nmajor          4                           \nminor          3.2                         \nyear           2023                        \nmonth          10                          \nday            31                          \nsvn rev        85441                       \nlanguage       R                           \nversion.string R version 4.3.2 (2023-10-31)\nnickname       Eye Holes                   \n\n\nand\n\npackageVersion(\"openxlsx2\")\n\n[1] '1.2'\n\n\nGraphics might reflect earlier states and are not constantly updated. If you find any irregularities where our code produces different output than expected, please let us know in the issue tracker at https://github.com/JanMarvin/openxlsx2/.\n\n\n\n\nBarbone, Jordan Mark, and Jan Marvin Garbuszus. 2023. Openxlsx2: Read, Write and Edit ‚ÄôXlsx‚Äô Files. https://github.com/JanMarvin/openxlsx2."
  },
  {
    "objectID": "chapters/01_introduction.html#installation",
    "href": "chapters/01_introduction.html#installation",
    "title": "1¬† Introduction",
    "section": "1.1 Installation",
    "text": "1.1 Installation\nYou can install the stable version of openxlsx2 with:\ninstall.packages('openxlsx2')\nYou can install the development version of openxlsx2 from GitHub with:\n# install.packages(\"remotes\")\nremotes::install_github(\"JanMarvin/openxlsx2\")\nOr from r-universe with:\n# Enable repository from janmarvin\noptions(repos = c(\n  janmarvin = 'https://janmarvin.r-universe.dev',\n  CRAN = 'https://cloud.r-project.org'))\n# Download and install openxlsx2 in R\ninstall.packages('openxlsx2')"
  },
  {
    "objectID": "chapters/01_introduction.html#working-with-the-package",
    "href": "chapters/01_introduction.html#working-with-the-package",
    "title": "1¬† Introduction",
    "section": "1.2 Working with the package",
    "text": "1.2 Working with the package\nWe offer two different variants how to work with openxlsx2.\n\nThe first one is to simply work with R objects. It is possible to read (read_xlsx()) and write (write_xlsx()) data from and to files. We offer a number of options in the commands to support various features of the openxml format, including reading and writing named ranges and tables. Furthermore, there are several ways to read certain information of an openxml spreadsheet without having opened it in a spreadsheet software before, e.g.¬†to get the contained sheet names or tables.\nAs a second variant openxlsx2 offers the work with so called wbWorkbook objects. Here an openxml file is read into a corresponding wbWorkbook object (wb_load()) or a new one is created (wb_workbook()). Afterwards the object can be further modified using various functions. For example, worksheets can be added or removed, the layout of cells or entire worksheets can be changed, and cells can be modified (overwritten or rewritten). Afterwards the wbWorkbook objects can be written as openxml files and processed by suitable spreadsheet software."
  },
  {
    "objectID": "chapters/01_introduction.html#example",
    "href": "chapters/01_introduction.html#example",
    "title": "1¬† Introduction",
    "section": "1.3 Example",
    "text": "1.3 Example\nThis is a basic example which shows you how to solve a common problem:\n\n  üü° Loading\n    webR..."
  },
  {
    "objectID": "chapters/01_introduction.html#authors-and-contributions",
    "href": "chapters/01_introduction.html#authors-and-contributions",
    "title": "1¬† Introduction",
    "section": "1.4 Authors and contributions",
    "text": "1.4 Authors and contributions\nFor a full list of all authors that have made this package possible and for whom we are greatful, please see:\n\n  üü° Loading\n    webR...\n  \n    \n    \n      \n    \n  \n  \n  \n\n\nIf you feel like you should be included on this list, please let us know. If you have something to contribute, you are welcome. If something is not working as expected, open issues or if you have solved an issue, open a pull request. Please be respectful and be aware that we are volunteers doing this for fun in our unpaid free time. We will work on problems when we have time or need."
  },
  {
    "objectID": "chapters/01_introduction.html#license",
    "href": "chapters/01_introduction.html#license",
    "title": "1¬† Introduction",
    "section": "1.5 License",
    "text": "1.5 License\nThe openxlsx2 package is licensed under the MIT license and is based on openxlsx (by Alexander Walker and Philipp Schauberger; COPYRIGHT 2014-2022) and pugixml (by Arseny Kapoulkine; COPYRIGHT 2006-2022). Both released under the MIT license."
  },
  {
    "objectID": "chapters/01_introduction.html#a-note-on-speed-and-memory-usage",
    "href": "chapters/01_introduction.html#a-note-on-speed-and-memory-usage",
    "title": "1¬† Introduction",
    "section": "1.6 A note on speed and memory usage",
    "text": "1.6 A note on speed and memory usage\nThe current state of openxlsx2 is that it is reasonably fast. That is, it works well with reasonably large input data when reading or writing. It may not work well with data that tests the limits of the openxml specification. Things may slow down on the R side of things, and performance and usability will depend on the speed and size of the local operating system‚Äôs CPU and memory.\nNote that there are at least two cases where openxlsx2 constructs potentially large data frames (i) when loading, openxlsx2 usually needs to read the entire input file into pugixml and convert it into long data frame(s), and wb_to_df() converts one long data frame into two data frames that construct the output object and (ii) when adding data to the workbook, openxlsx2 reshapes the input data frame into a long data frame and stores it in the workbook, and writes the entire worksheet into a pugixml file that is written when it is complete. Applying cell styles, date conversions etc. will further slow down the process and finally the sheets will be zipped to provide the xlsx output.\nTherefore, if you are faced with an unreasonably large dataset, either give yourself enough time, use another package to write the xlsx output (openxlsx2 was not written with the intention of working with maximum memory efficiency), and by all means use other ways to store data (binary file formats or a database). However, we are always happy to improve, so if you have found a way to improve what we are currently doing, please let us know and open an issue or a pull request."
  },
  {
    "objectID": "chapters/01_introduction.html#invitation-to-contribute",
    "href": "chapters/01_introduction.html#invitation-to-contribute",
    "title": "1¬† Introduction",
    "section": "1.7 Invitation to contribute",
    "text": "1.7 Invitation to contribute\nWe have put a lot of work into openxls2 to make it useful for our needs, improving what we found useful about openxlsx and removing what we didn‚Äôt need. We do not claim to be omniscient about all the things you can do with spreadsheet software, nor do we claim to be omniscient about all the things you can do in openxlsx2. Nevertheless, we are quite fond of our little package and invite others to try it out and comment on what they like and of course what they think we are missing or if something doesn‚Äôt work. openxlsx2 is a complex piece of software that certainly does not work bug-free, even if we did our best. If you want to contribute to the development of openxlsx2, please be our guest on our Github. Join or open a discussion, post or fix issues or write us a mail.\n\n\n\n\nAllen, Michael. 2023. Readxlsb: Read ‚ÄôExcel‚Äô Binary (.xlsb) Workbooks. https://CRAN.R-project.org/package=readxlsb.\n\n\nBarbone, Jordan Mark, and Jan Marvin Garbuszus. 2023. Openxlsx2: Read, Write and Edit ‚ÄôXlsx‚Äô Files. https://github.com/JanMarvin/openxlsx2.\n\n\nChang, Winston. 2021. R6: Encapsulated Classes with Reference Semantics. https://CRAN.R-project.org/package=R6.\n\n\nDragulescu, Adrian, and Cole Arendt. 2023. Xlsx: Read, Write, Format Excel 2007 and Excel 97/2000/XP/2003 Files. https://CRAN.R-project.org/package=xlsx.\n\n\nEddelbuettel, Dirk, and Romain Fran√ßois. 2011. ‚ÄúRcpp: Seamless R and C++ Integration.‚Äù Journal of Statistical Software 40 (8): 1‚Äì18. https://doi.org/10.18637/jss.v040.i08.\n\n\nGarmonsway, Duncan. 2022. Tidyxl: Read Untidy Excel Files. https://CRAN.R-project.org/package=tidyxl.\n\n\nKapoulkine, Arseny. 2006-2022. Pugixml. https://pugixml.org.\n\n\nOoms, Jeroen. 2023. Writexl: Export Data Frames to Excel ‚ÄôXlsx‚Äô Format. https://CRAN.R-project.org/package=writexl.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. Openxlsx: Read, Write and Edit Xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchwartz, Marc. 2022. WriteXLS: Cross-Platform Perl Based r Function to Create Excel 2003 (XLS) and Excel 2007 (XLSX) Files. https://CRAN.R-project.org/package=WriteXLS.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. Readxl: Read Excel Files. https://CRAN.R-project.org/package=readxl."
  },
  {
    "objectID": "chapters/01_introduction.html#footnotes",
    "href": "chapters/01_introduction.html#footnotes",
    "title": "1¬† Introduction",
    "section": "",
    "text": "See https://github.com/omegahat/RDCOMClient.‚Ü©Ô∏é\nSee https://wikipedia.org/wiki/Office_Open_XML.‚Ü©Ô∏é"
  },
  {
    "objectID": "chapters/openxlsx2_basic_manual.html#importing-data",
    "href": "chapters/openxlsx2_basic_manual.html#importing-data",
    "title": "2¬† basics",
    "section": "2.1 Importing data",
    "text": "2.1 Importing data\nComing from openxlsx you might know about read.xlsx() (two functions, one for files and one for workbooks) and readWorkbook(). Functions that do different things, but mostly the same. In openxlsx2 we tried our best to reduce the complexity under the hood and for the user as well. In openxlsx2 they are replaced with read_xlsx(), wb_read() and they share the same underlying function wb_to_df().\nFor this example we will use example data provided by the package. You can locate it in our ‚Äúinst/extdata‚Äù folder. The files are included with the package source and you can open them in any calculation software as well.\n\n2.1.1 Basic import\nWe begin with the openxlsx2_example.xlsx file by telling R where to find this file on our system\n\nxlsxFile &lt;- system.file(\"extdata\", \"openxlsx2_example.xlsx\", package = \"openxlsx2\")\n\nThe object contains a path to the xlsx file and we pass this file to our function to read the workbook into R\n\n# import workbook\nwb_to_df(xlsxFile)\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\nThe output is created as a data frame and contains data types date, logical, numeric and character. The function to import the file to R, wb_to_df() provides similar options as the openxlsx functions read.xlsx() and readWorkbook() and a few new functions we will go through the options. As you might have noticed, we return the column of the xlsx file as the row name of the data frame returned. Per default the first sheet in the workbook is imported. If you want to switch this, either provide the sheet parameter with the correct index or provide the sheet name.\n\n\n2.1.2 col_names - first row as column name\nIn the previous example the first imported row was used as column name for the data frame. This is the default behavior, but not always wanted or expected. Therefore this behavior can be disabled by the user.\n\n# do not convert first row to column names\nwb_to_df(xlsxFile, col_names = FALSE)\n#&gt;        B    C  D     E     F          G            H       I        J\n#&gt; 2     NA Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE &lt;NA&gt; NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA &lt;NA&gt; NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n\n2.1.3 detect_dates - convert cells to R dates\nThe creators of the openxml standard are well known for mistakenly treating something as a date and openxlsx2 has built in ways to identify a cell as a date and will try to convert the value for you, but unfortunately this is not always a trivial task and might fail. In such a case we provide an option to disable the date conversion entirely. In this case the underlying numerical value will be returned.\n\n# do not try to identify dates in the data\nwb_to_df(xlsxFile, detect_dates = FALSE)\n#&gt;     Var1 Var2 NA  Var3  Var4  Var5         Var6    Var7       Var8\n#&gt; 3   TRUE    1 NA     1     a 45075 3209324 This #DIV/0! 0.06059028\n#&gt; 4   TRUE   NA NA #NUM!     b 45069         &lt;NA&gt;       0 0.58538194\n#&gt; 5   TRUE    2 NA  1.34     c 44958         &lt;NA&gt; #VALUE! 0.95905093\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!    NA         &lt;NA&gt;       2 0.72561343\n#&gt; 7  FALSE    3 NA  1.56     e    NA         &lt;NA&gt;    &lt;NA&gt;         NA\n#&gt; 8  FALSE    1 NA   1.7     f 44987         &lt;NA&gt;     2.7 0.36525463\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;    NA         &lt;NA&gt;    &lt;NA&gt;         NA\n#&gt; 10 FALSE    2 NA    23     h 45284         &lt;NA&gt;      25         NA\n#&gt; 11 FALSE    3 NA  67.3     i 45285         &lt;NA&gt;       3         NA\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 45138         &lt;NA&gt;     122         NA\n\n\n\n2.1.4 show_formula - show formulas instead of results\nSometimes things might feel off. This can be because the openxml files are not updating formula results in the sheets unless they are opened in software that provides such functionality as certain tabular calculation software. Therefore the user might be interested in the underlying functions to see what is going on in the sheet. Using show_formula this is possible\n\n# return the underlying Excel formula instead of their values\nwb_to_df(xlsxFile, show_formula = TRUE)\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6            Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This            E3/0 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;              C4 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt;         #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;           C6+E6 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;           C8+E8 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;            &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;    SUM(C10,E10)     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt; PRODUCT(C11,E3)     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;         E12-C12     &lt;NA&gt;\n\n\n\n2.1.5 dims - read specific dimension\nSometimes the entire worksheet contains to much data, in such case we provide functions to read only a selected dimension range. Such a range consists of either a specific cell like ‚ÄúA1‚Äù or a cell range in the notion used in the openxml standard\n\n# read dimension without column names\nwb_to_df(xlsxFile, dims = \"A2:C5\", col_names = FALSE)\n#&gt;    A    B    C\n#&gt; 2 NA   NA Var2\n#&gt; 3 NA TRUE    1\n#&gt; 4 NA TRUE &lt;NA&gt;\n#&gt; 5 NA TRUE    2\n\nAlternatively, if you don‚Äôt know the Excel sheet‚Äôs address, you can use wb_dims() to specify the dimension. See below or in?wb_dims for more details.\n\n# read dimension without column names with `wb_dims()`\nwb_to_df(xlsxFile, dims = wb_dims(rows = 2:5, cols = 1:3), col_names = FALSE)\n#&gt;    A    B    C\n#&gt; 2 NA   NA Var2\n#&gt; 3 NA TRUE    1\n#&gt; 4 NA TRUE &lt;NA&gt;\n#&gt; 5 NA TRUE    2\n\n\n\n2.1.6 cols - read selected columns\nIf you do not want to read a specific cell, but a cell range you can use the column attribute. This attribute takes a numeric vector as argument\n\n# read selected cols\nwb_to_df(xlsxFile, cols = c(\"A:B\", \"G\"))\n#&gt;    NA  Var1       Var5\n#&gt; 3  NA  TRUE 2023-05-29\n#&gt; 4  NA  TRUE 2023-05-23\n#&gt; 5  NA  TRUE 2023-02-01\n#&gt; 6  NA FALSE       &lt;NA&gt;\n#&gt; 7  NA FALSE       &lt;NA&gt;\n#&gt; 8  NA FALSE 2023-03-02\n#&gt; 9  NA    NA       &lt;NA&gt;\n#&gt; 10 NA FALSE 2023-12-24\n#&gt; 11 NA FALSE 2023-12-25\n#&gt; 12 NA    NA 2023-07-31\n\n\n\n2.1.7 rows - read selected rows\nThe same goes with rows. You can select them using numeric vectors\n\n# read selected rows\nwb_to_df(xlsxFile, rows = c(2, 4, 6))\n#&gt;    Var1 Var2 NA  Var3  Var4       Var5 Var6 Var7     Var8\n#&gt; 4  TRUE   NA NA #NUM!     b 2023-05-23   NA    0 14:02:57\n#&gt; 6 FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;   NA    2 17:24:53\n\n\n\n2.1.8 convert - convert input to guessed type\nIn xml exists no difference between value types. All values are per default characters. To provide these as numerics, logicals or dates, openxlsx2 and every other software dealing with xlsx files has to make assumptions about the cell type. This is especially tricky due to the notion of worksheets. Unlike in a data frame, a worksheet can have a wild mix of all types of data. Even though the conversion process from character to date or numeric is rather solid, sometimes the user might want to see the data without any conversion applied. This might be useful in cases where something unexpected happened or the import created warnings. In such a case you can look at the raw input data. If you want to disable date detection as well, please see the entry above.\n\n# convert characters to numerics and date (logical too?)\nwb_to_df(xlsxFile, convert = FALSE)\n#&gt;     Var1 Var2   NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 &lt;NA&gt;     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE &lt;NA&gt; &lt;NA&gt; #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 &lt;NA&gt;  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 &lt;NA&gt;  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 &lt;NA&gt;  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 &lt;NA&gt;   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9   &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 &lt;NA&gt;    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 &lt;NA&gt;  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12  &lt;NA&gt;    1 &lt;NA&gt;   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n\n2.1.9 skip_empty_rows - remove empty rows\nEven though openxlsx2 imports everything as requested, sometimes it might be helpful to remove empty lines from the data. These might be either left empty intentional or empty because they are were formatted, but the cell value was removed afterwards. This was added mostly for backward comparability, but the default has been changed to FALSE. The behavior has changed a bit as well. Previously empty cells were removed prior to the conversion to R data frames, now they are removed after the conversion and are removed only if they are completely empty\n\n# erase empty rows from dataset\nwb_to_df(xlsxFile, sheet = 1, skip_empty_rows = TRUE) |&gt; tail()\n#&gt;     Var1 Var2 NA Var3  Var4       Var5 Var6 Var7     Var8\n#&gt; 6  FALSE    2 NA &lt;NA&gt; #NUM!       &lt;NA&gt; &lt;NA&gt;    2 17:24:53\n#&gt; 7  FALSE    3 NA 1.56     e       &lt;NA&gt; &lt;NA&gt; &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA  1.7     f 2023-03-02 &lt;NA&gt;  2.7 08:45:58\n#&gt; 10 FALSE    2 NA   23     h 2023-12-24 &lt;NA&gt;   25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA 67.3     i 2023-12-25 &lt;NA&gt;    3     &lt;NA&gt;\n#&gt; 12    NA    1 NA  123  &lt;NA&gt; 2023-07-31 &lt;NA&gt;  122     &lt;NA&gt;\n\n\n\n2.1.10 skip_empty_cols - remove empty columns\nThe same for columns\n\n# erase empty columns from dataset\nwb_to_df(xlsxFile, skip_empty_cols = TRUE)\n#&gt;     Var1 Var2  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n\n2.1.11 row_names - keep rownames from input\nSometimes the data source might provide rownames as well. In such a case you can openxlsx2 to treat the first column as rowname\n\n# convert first row to rownames\nwb_to_df(xlsxFile, sheet = 2, dims = \"C6:G9\", row_names = TRUE)\n#&gt;                mpg cyl disp  hp\n#&gt; Mazda RX4     21.0   6  160 110\n#&gt; Mazda RX4 Wag 21.0   6  160 110\n#&gt; Datsun 710    22.8   4  108  93\n\n\n\n2.1.12 types - convert column to specific type\nIf the user know better than the software what type to expect in a worksheet, this can be provided via types. This parameter takes a named numeric. 0 is character, 1 is numeric and 2 is date\n\n# define type of the data.frame\nwb_to_df(xlsxFile, cols = c(2, 5), types = c(\"Var1\" = 0, \"Var3\" = 1))\n#&gt;     Var1   Var3\n#&gt; 3   TRUE   1.00\n#&gt; 4   TRUE    NaN\n#&gt; 5   TRUE   1.34\n#&gt; 6  FALSE     NA\n#&gt; 7  FALSE   1.56\n#&gt; 8  FALSE   1.70\n#&gt; 9   &lt;NA&gt;     NA\n#&gt; 10 FALSE  23.00\n#&gt; 11 FALSE  67.30\n#&gt; 12  &lt;NA&gt; 123.00\n\n\n\n2.1.13 start_row - where to begin\nOften the creator of the worksheet has used a lot of creativity and the data does not begin in the first row, instead it begins somewhere else. To define the row where to begin reading, define it via the start_row parameter\n\n# start in row 5\nwb_to_df(xlsxFile, start_row = 5, col_names = FALSE)\n#&gt;        B  C  D      E     F          G  H       I        J\n#&gt; 5   TRUE  2 NA   1.34     c 2023-02-01 NA #VALUE! 23:01:02\n#&gt; 6  FALSE  2 NA     NA #NUM!       &lt;NA&gt; NA       2 17:24:53\n#&gt; 7  FALSE  3 NA   1.56     e       &lt;NA&gt; NA    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE  1 NA   1.70     f 2023-03-02 NA     2.7 08:45:58\n#&gt; 9     NA NA NA     NA  &lt;NA&gt;       &lt;NA&gt; NA    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE  2 NA  23.00     h 2023-12-24 NA      25     &lt;NA&gt;\n#&gt; 11 FALSE  3 NA  67.30     i 2023-12-25 NA       3     &lt;NA&gt;\n#&gt; 12    NA  1 NA 123.00  &lt;NA&gt; 2023-07-31 NA     122     &lt;NA&gt;\n\n\n\n2.1.14 na.strings - define missing values\nThere is the ‚Äú#N/A‚Äù string, but often the user will be faced with custom missing values and other values we are not interested. Such strings can be passed as character vector via na.strings\n\n# na strings\nwb_to_df(xlsxFile, na.strings = \"\")\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\n\n\n2.1.15 Importing as workbook\nIn addition to importing directly from xlsx or xlsm files, openxlsx2 provides the wbWorkbook class used for importing and modifying entire the openxml files in R. This workbook class is the heart of openxlsx2 and probably the reason why you are reading this manual in the first place.\nImporting a file into a workbook looks like this:\n\n# the file we are going to load\nxlsxFile &lt;- system.file(\"extdata\", \"openxlsx2_example.xlsx\", package = \"openxlsx2\")\n# loading the file into the workbook\nwb &lt;- wb_load(file = xlsxFile)\n\nThe additional options wb_load() provides are for internal use: sheet loads only a selected sheet from the workbook and data_only reads only the data parts from a workbook and ignores any additional graphics or pivot tables. Both functions create workbook objects that can only be used to read data, and we do not recommend end users to use them. Especially not if they intend to re-export the workbook afterwards.\nOnce a workbook is imported, we provide several functions to interact with and modify it (the wb_to_df() function mentioned above works the same way for an imported workbook). It is possible to add new sheets and remove sheets, as well as to add or remove data. R-plots can be inserted and also the style of the workbook can be changed, new fonts, background colors and number formats. There is a wealth of options explained in the man pages and the additional style vignette (more vignettes to follow)."
  },
  {
    "objectID": "chapters/openxlsx2_basic_manual.html#exporting-data",
    "href": "chapters/openxlsx2_basic_manual.html#exporting-data",
    "title": "2¬† basics",
    "section": "2.2 Exporting data",
    "text": "2.2 Exporting data\n\n2.2.1 Exporting data frames or vectors\nIf you want to export a data frame from R, you can use write_xlsx() which will create an xlsx file. This file can be tweaked further. See ?openxlsx2::write_xlsx to see all the options. (Further explanation and examples will follow).\n\nwrite_xlsx(x = mtcars, file = \"mtcars.xlsx\")\n\n\n\n2.2.2 Exporting a wbWorkbook\nImported workbooks can be saved as xlsx or xlsm files with the wrapper wb_save() or with wb$save(). Both functions take the filename and an optional overwrite option. If the latter is set, an optional guard is provided to check if the file you want to write already exists. But be careful, this is optional. The default is to save the file and replace an existing file. Of course, on Windows, files that are locked (for example, if they were opened by another process) will not be replaced.\n\n# replace the existing file\nwb$save(\"mtcars.xlsx\")\n\n# do not overwrite the existing file\ntry(wb$save(\"mtcars.xlsx\", overwrite = FALSE))"
  },
  {
    "objectID": "chapters/openxlsx2_basic_manual.html#dims-wb_dims",
    "href": "chapters/openxlsx2_basic_manual.html#dims-wb_dims",
    "title": "2¬† basics",
    "section": "2.3 dims/ wb_dims()",
    "text": "2.3 dims/ wb_dims()\nIn openxlsx2 functions that interact with worksheet cells are using dims as argument and require the users to provide these. dims are cells or cell ranges in A1 notation. The single argument dims hereby replaces col/row, cols/rows and xy. Since A1 notation is rather simple in the first few columns it might get confusing after the 26. Therefore we provide a wrapper to construct it:\n\n# various options\nwb_dims(from_row = 4)\n#&gt; [1] \"A4\"\n\nwb_dims(rows = 4, cols = 4)\n#&gt; [1] \"D4\"\nwb_dims(rows = 4, cols = \"D\")\n#&gt; [1] \"D4\"\n\nwb_dims(rows = 4:10, cols = 5:9)\n#&gt; [1] \"E4:I10\"\n\nwb_dims(rows = 4:10, cols = \"A:D\") # same as below\n#&gt; [1] \"A4:D10\"\nwb_dims(rows = seq_len(7), cols = seq_len(4), from_row = 4)\n#&gt; [1] \"A4:D10\"\n# 10 rows and 15 columns from indice B2.\nwb_dims(rows = 1:10, cols = 1:15, from_col = \"B\", from_row = 2)\n#&gt; [1] \"B2:P11\"\n\n# data + col names\nwb_dims(x = mtcars)\n#&gt; [1] \"A1:K33\"\n# only data\nwb_dims(x = mtcars, select = \"data\")\n#&gt; [1] \"A2:K33\"\n\n# The dims of the values of a column in `x`\nwb_dims(x = mtcars, cols = \"cyl\")\n#&gt; [1] \"B2:B33\"\n# a column in `x` with the column name\nwb_dims(x = mtcars, cols = \"cyl\", select = \"x\")\n#&gt; [1] \"B1:B33\"\n# rows in `x`\nwb_dims(x = mtcars)\n#&gt; [1] \"A1:K33\"\n\n# in a wb chain\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = mtcars)$\n  add_fill(\n    dims = wb_dims(x = mtcars, rows = 1:5), # only 1st 5 rows of x data\n    color = wb_color(\"yellow\")\n  )$\n  add_fill(\n    dims = wb_dims(x = mtcars, select = \"col_names\"), # only column names\n    color = wb_color(\"cyan2\")\n  )\n\n# or if the data's first coord needs to be located in B2.\n\nwb_dims_custom &lt;- function(...) {\n  wb_dims(x = mtcars, from_col = \"B\", from_row = 2, ...)\n}\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = mtcars, dims = wb_dims_custom())$\n  add_fill(\n    dims = wb_dims_custom(rows = 1:5),\n    color = wb_color(\"yellow\")\n  )$\n  add_fill(\n    dims = wb_dims_custom(select = \"col_names\"),\n    color = wb_color(\"cyan2\")\n  )"
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html",
    "href": "chapters/openxlsx2_style_manual.html",
    "title": "3¬† styling",
    "section": "",
    "text": "4 Working with number formats\nPer default openxlsx2 will pick up number formats for selected R classes.\nThe loop below will apply the tint attribute to the fill color\nTint variations of the theme colors.\nwb &lt;- wb_workbook() %&gt;% wb_add_worksheet(\"S1\")\n\ntints &lt;- seq(-0.9, 0.9, by = 0.1)\n\nfor (i in 0:9) {\n  for (tnt in tints) {\n    col &lt;- paste0(int2col(i + 1), which(tints %in% tnt))\n\n    if (tnt == 0) {\n      wb &lt;- wb %&gt;% wb_add_fill(dims = col, color = wb_color(theme = i))\n    } else {\n      wb &lt;- wb %&gt;% wb_add_fill(dims = col, color = wb_color(theme = i, tint = tnt))\n    }\n  }\n}\nIt is possible to copy the styles of several cells at once. In the following example, the styles of some cells from a formatted workbook are applied to a previously empty cell range. Be careful though, wb_get_cell_style() returns only some styles, so you have to make sure that the copy-from and copy-to dimensions match in a meaningful way.\nwb &lt;- wb_load(system.file(\"extdata\", \"oxlsx2_sheet.xlsx\", package = \"openxlsx2\")) %&gt;%\n  wb_set_cell_style(1, \"A30:G35\", wb_get_cell_style(., 1, \"A10:G15\"))\n# wb_open(wb)\nUsing fmt_txt() is possible to style strings independently of the cell containing the string.\ntxt &lt;- \n  fmt_txt(\"Embracing the full potential of \") +\n  fmt_txt(\"openxlsx2\", bold = TRUE, size = 16) +\n  fmt_txt(\" with \") +\n  fmt_txt(\"fmt_txt()\", font = \"Courier\") +\n  fmt_txt(\" !\")\n\nwb &lt;- wb_workbook()$add_worksheet()$add_data(x = txt, col_names = FALSE)\nAs shown above it is possible to combine multiple styles together into a longer string. It is even possible to use fmt_txt() as na.strings:\ndf &lt;- mtcars\ndf[df &lt; 4] &lt;- NA\n\nna_red &lt;- fmt_txt(\"N/A\", color = wb_color(\"red\"), italic = TRUE, bold = TRUE)\n\nwb &lt;- wb_workbook()$add_worksheet()$add_data(x = df, na.strings = na_red)\nWith create_tablestyle() it is possible to create your own table styles. This function uses create_dxfs_style() (just like your spreadsheet software does). Therefore, it is not quite as user-friendly. The following example shows how the function creates a red table style. The various dxfs styles must be created and assigned to the workbook (similar styles are used in conditional formatting). In create_tablestyle() these styles are assigned to the table style elements. Once the table style is created, it must also be assigned to the workbook. After that you can use it in the workbook like any other table style.\n# a red table style\ndx0 &lt;- create_dxfs_style(\n  border = TRUE,\n  left_color = wb_color(\"red\"),\n  right_color = NULL, right_style = NULL,\n  top_color = NULL, top_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx1 &lt;- create_dxfs_style(\n  border = TRUE,\n  left_color = wb_color(\"red\"),\n  right_color = NULL, right_style = NULL,\n  top_color = NULL, top_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx2 &lt;- create_dxfs_style(\n  border = TRUE,\n  top_color = wb_color(\"red\"),\n  left_color = NULL, left_style = NULL,\n  right_color = NULL, right_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx3 &lt;- create_dxfs_style(\n  border = TRUE,\n  top_color = wb_color(\"red\"),\n  left_color = NULL, left_style = NULL,\n  right_color = NULL, right_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx4 &lt;- create_dxfs_style(\n  text_bold = TRUE\n)\n\ndx5 &lt;- create_dxfs_style(\n  text_bold = TRUE\n)\n\ndx6 &lt;- create_dxfs_style(\n  font_color = wb_color(\"red\"),\n  text_bold = TRUE,\n  border = TRUE,\n  top_style = \"double\",\n  left_color = NULL, left_style = NULL,\n  right_color = NULL, right_style = NULL,\n  bottom_color = NULL, bottom_style = NULL\n)\n\ndx7 &lt;- create_dxfs_style(\n  font_color = wb_color(\"white\"),\n  text_bold = TRUE,\n  bgFill = wb_color(\"red\"),\n  fgColor = wb_color(\"red\")\n)\n\ndx8 &lt;- create_dxfs_style(\n  border = TRUE,\n  left_color = wb_color(\"red\"),\n  top_color = wb_color(\"red\"),\n  right_color = wb_color(\"red\"),\n  bottom_color = wb_color(\"red\")\n)\n\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(grid_lines = FALSE)\n\nwb$add_style(dx0)\nwb$add_style(dx1)\nwb$add_style(dx2)\nwb$add_style(dx3)\nwb$add_style(dx4)\nwb$add_style(dx5)\nwb$add_style(dx6)\nwb$add_style(dx7)\nwb$add_style(dx8)\n\n# finally create the table\nxml &lt;- create_tablestyle(\n  name                 = \"red_table\",\n  whole_table          = wb$styles_mgr$get_dxf_id(\"dx8\"),\n  header_row           = wb$styles_mgr$get_dxf_id(\"dx7\"),\n  total_row            = wb$styles_mgr$get_dxf_id(\"dx6\"),\n  first_column         = wb$styles_mgr$get_dxf_id(\"dx5\"),\n  last_column          = wb$styles_mgr$get_dxf_id(\"dx4\"),\n  first_row_stripe     = wb$styles_mgr$get_dxf_id(\"dx3\"),\n  second_row_stripe    = wb$styles_mgr$get_dxf_id(\"dx2\"),\n  first_column_stripe  = wb$styles_mgr$get_dxf_id(\"dx1\"),\n  second_column_stripe = wb$styles_mgr$get_dxf_id(\"dx0\")\n)\n\n\nwb$add_style(xml)\n\n# create a table and apply the custom style\nwb &lt;- wb %&gt;%\n  wb_add_data_table(x = mtcars, table_style = \"red_table\")\nwb &lt;- wb_workbook()$add_worksheet()\n\nname &lt;- \"Normal\"\ndims &lt;- \"A1\"\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Bad\"\ndims &lt;- \"B1\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Good\"\ndims &lt;- \"C1\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Neutral\"\ndims &lt;- \"D1\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Calculation\"\ndims &lt;- \"A2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Check Cell\"\ndims &lt;- \"B2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Explanatory Text\"\ndims &lt;- \"C2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Input\"\ndims &lt;- \"D2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Linked Cell\"\ndims &lt;- \"E2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Note\"\ndims &lt;- \"F2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Output\"\ndims &lt;- \"G2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Warning Text\"\ndims &lt;- \"H2\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 1\"\ndims &lt;- \"A3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 2\"\ndims &lt;- \"B3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 3\"\ndims &lt;- \"C3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Heading 4\"\ndims &lt;- \"D3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Title\"\ndims &lt;- \"E3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Total\"\ndims &lt;- \"F3\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nfor (i in seq_len(6)) {\n  \n  name &lt;- paste0(\"20% - Accent\", i)\n  dims &lt;- paste0(int2col(i), \"4\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n  \n  name &lt;- paste0(\"40% - Accent\", i)\n  dims &lt;- paste0(int2col(i), \"5\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n  \n  name &lt;- paste0(\"60% - Accent\", i)\n  dims &lt;- paste0(int2col(i), \"6\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n  \n  name &lt;- paste0(\"Accent\", i)\n  dims &lt;- paste0(int2col(i), \"7\")\n  wb$add_named_style(dims = dims, name = name)\n  wb$add_data(dims = dims, x = name)\n  \n}\n\nname &lt;- \"Comma\"\ndims &lt;- \"A8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Comma [0]\"\ndims &lt;- \"B8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Currency\"\ndims &lt;- \"C8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Currency [0]\"\ndims &lt;- \"D8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\nname &lt;- \"Per cent\"\ndims &lt;- \"E8\"\nwb$add_named_style(dims = dims, name = name)\nwb$add_data(dims = dims, x = name)\n\n# wb$open()"
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#colors-text-rotation-and-number-formats",
    "href": "chapters/openxlsx2_style_manual.html#colors-text-rotation-and-number-formats",
    "title": "3¬† styling",
    "section": "3.1 Colors, text rotation and number formats",
    "text": "3.1 Colors, text rotation and number formats\nBelow we show you two ways how to create styled tables with openxlsx2 one using the high level functions to style worksheet areas and one using the bare metal approach of creating the identical table. We show both ways to create styles in openxlsx2 to show how you could build on our functions or create your very own functions.\n\n\n\n\n\nThe example below, with increased column width.\n\n\n\n\n\n3.1.1 the quick way: using high level functions\n\n# add some dummy data\nset.seed(123)\nmat &lt;- matrix(rnorm(28 * 28, mean = 44444, sd = 555), ncol = 28)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\nborder_col &lt;- wb_color(theme = 1)\nborder_sty &lt;- \"thin\"\n\n# prepare workbook with data and formated first row\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"test\") %&gt;%\n  wb_add_data(x = mat) %&gt;%\n  wb_add_border(dims = \"A1:AB1\",\n    top_color = border_col, top_border = border_sty,\n    bottom_color = border_col, bottom_border = border_sty,\n    left_color = border_col, left_border = border_sty,\n    right_color = border_col, right_border = border_sty,\n    inner_hcolor = border_col, inner_hgrid = border_sty\n  ) %&gt;%\n  wb_add_fill(dims = \"A1:AB1\", color = wb_color(hex = \"FF334E6F\")) %&gt;%\n  wb_add_font(dims = \"A1:AB1\", name = \"Arial\", bold = TRUE, color = wb_color(hex = \"FFFFFFFF\"), size = 20) %&gt;%\n  wb_add_cell_style(dims = \"A1:AB1\", horizontal = \"center\", text_rotation = 45)\n\n# create various number formats\nx &lt;- c(\n  0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  37, 38, 39, 40, 45, 46, 47, 48, 49\n)\n\n# apply the styles\nfor (i in seq_along(x)) {\n  cell &lt;- sprintf(\"%s2:%s29\", int2col(i), int2col(i))\n  wb &lt;- wb %&gt;% wb_add_numfmt(dims = cell, numfmt = x[i])\n}\n\n# wb$open()\n\n\n\n3.1.2 the long way: using bare metal functions\n\n# create workbook\nwb &lt;- wb_workbook() %&gt;% wb_add_worksheet(\"test\")\n\n# add some dummy data to the worksheet\nset.seed(123)\nmat &lt;- matrix(rnorm(28 * 28, mean = 44444, sd = 555), ncol = 28)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\nwb$add_data(x = mat, col_names = TRUE)\n\n# create a border style and assign it to the workbook\nblack &lt;- wb_color(hex = \"FF000000\")\nnew_border &lt;- create_border(\n  bottom = \"thin\", bottom_color = black,\n  top = \"thin\", top_color = black,\n  left = \"thin\", left_color = black,\n  right = \"thin\", right_color = black\n)\nwb$styles_mgr$add(new_border, \"new_border\")\n\n\n# create a fill style and assign it to the workbook\nnew_fill &lt;- create_fill(patternType = \"solid\", fgColor = wb_color(hex = \"FF334E6F\"))\nwb$styles_mgr$add(new_fill, \"new_fill\")\n\n# create a font style and assign it to the workbook\nnew_font &lt;- create_font(sz = 20, name = \"Arial\", b = TRUE, color = wb_color(hex = \"FFFFFFFF\"))\nwb$styles_mgr$add(new_font, \"new_font\")\n\n# create a new cell style, that uses the fill, the font and the border style\nnew_cellxfs &lt;- create_cell_style(\n  num_fmt_id    = 0,\n  horizontal    = \"center\",\n  text_rotation = 45,\n  fill_id       = wb$styles_mgr$get_fill_id(\"new_fill\"),\n  font_id       = wb$styles_mgr$get_font_id(\"new_font\"),\n  border_id     = wb$styles_mgr$get_border_id(\"new_border\")\n)\n# assign this style to the workbook\nwb$styles_mgr$add(new_cellxfs, \"new_styles\")\n\n# assign the new cell style to the header row of our data set\ncell &lt;- sprintf(\"A1:%s1\", int2col(nrow(mat)))\nwb &lt;- wb %&gt;% wb_set_cell_style(\n  dims = cell,\n  style = wb$styles_mgr$get_xf_id(\"new_styles\")\n)\n\n## style the cells with some builtin format codes (no new numFmt entry is needed)\n# add builtin style ids\nx &lt;- c(\n  1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  37, 38, 39, 40, 45, 46, 47, 48, 49\n)\n\n# create styles\nnew_cellxfs &lt;- create_cell_style(num_fmt_id = x, horizontal = \"center\")\n\n# assign the styles to the workbook\nfor (i in seq_along(x)) {\n  wb$styles_mgr$add(new_cellxfs[i], paste0(\"new_style\", i))\n}\n\n# new styles are 1:28\nnew_styles &lt;- wb$styles_mgr$get_xf()\nfor (i in as.integer(new_styles$id[new_styles$name %in% paste0(\"new_style\", seq_along(x))])) {\n  cell &lt;- sprintf(\"%s2:%s29\", int2col(i), int2col(i))\n  wb &lt;- wb %&gt;% wb_set_cell_style(dims = cell, style = i)\n}\n\n# assign a custom tabColor\nwb$worksheets[[1]]$sheetPr &lt;- xml_node_create(\n  \"sheetPr\",\n  xml_children = xml_node_create(\n    \"tabColor\",\n    xml_attributes = wb_color(hex = \"FF00FF00\")\n  )\n)\n\n# # look at the beauty you've created\n# wb_open(wb)"
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#numfmts",
    "href": "chapters/openxlsx2_style_manual.html#numfmts",
    "title": "3¬† styling",
    "section": "4.1 numfmts",
    "text": "4.1 numfmts\n\n## Create Workbook object and add worksheets\nwb &lt;- wb_workbook()\nwb$add_worksheet(\"S1\")\nwb$add_worksheet(\"S2\")\n\ndf &lt;- data.frame(\n  \"Date\" = Sys.Date() - 0:19,\n  \"T\" = TRUE, \"F\" = FALSE,\n  \"Time\" = Sys.time() - 0:19 * 60 * 60,\n  \"Cash\" = paste(\"$\", 1:20), \"Cash2\" = 31:50,\n  \"hLink\" = \"https://CRAN.R-project.org/\",\n  \"Percentage\" = seq(0, 1, length.out = 20),\n  \"TinyNumbers\" = runif(20) / 1E9, stringsAsFactors = FALSE\n)\n\n## openxlsx will apply default Excel styling for these classes\nclass(df$Cash) &lt;- c(class(df$Cash), \"currency\")\nclass(df$Cash2) &lt;- c(class(df$Cash2), \"accounting\")\nclass(df$hLink) &lt;- \"hyperlink\"\nclass(df$Percentage) &lt;- c(class(df$Percentage), \"percentage\")\nclass(df$TinyNumbers) &lt;- c(class(df$TinyNumbers), \"scientific\")\n\nwb$add_data(\"S1\", x = df, start_row = 4, row_names = FALSE)\nwb$add_data_table(\"S2\", x = df, start_row = 4, row_names = FALSE)"
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#numfmts2",
    "href": "chapters/openxlsx2_style_manual.html#numfmts2",
    "title": "3¬† styling",
    "section": "4.2 numfmts2",
    "text": "4.2 numfmts2\nIn addition, you can set the style to be picked up using openxlsx2 options.\n\nwb &lt;- wb_workbook()\nwb &lt;- wb_add_worksheet(wb, \"test\")\n\noptions(\"openxlsx2.dateFormat\" = \"yyyy\")\noptions(\"openxlsx2.datetimeFormat\" = \"yyyy-mm-dd\")\noptions(\"openxlsx2.numFmt\" = \"‚Ç¨ #.0\")\n\ndf &lt;- data.frame(\n  \"Date\" = Sys.Date() - 0:19,\n  \"T\" = TRUE, \"F\" = FALSE,\n  \"Time\" = Sys.time() - 0:19 * 60 * 60,\n  \"Cash\" = paste(\"$\", 1:20), \"Cash2\" = 31:50,\n  \"hLink\" = \"https://CRAN.R-project.org/\",\n  \"Percentage\" = seq(0, 1, length.out = 20),\n  \"TinyNumbers\" = runif(20) / 1E9, stringsAsFactors = FALSE,\n  \"numeric\" = 1\n)\n\n## openxlsx will apply default Excel styling for these classes\nclass(df$Cash) &lt;- c(class(df$Cash), \"currency\")\nclass(df$Cash2) &lt;- c(class(df$Cash2), \"accounting\")\nclass(df$hLink) &lt;- \"hyperlink\"\nclass(df$Percentage) &lt;- c(class(df$Percentage), \"percentage\")\nclass(df$TinyNumbers) &lt;- c(class(df$TinyNumbers), \"scientific\")\n\nwb$add_data(\"test\", df)"
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#wb_set_col_widths",
    "href": "chapters/openxlsx2_style_manual.html#wb_set_col_widths",
    "title": "3¬† styling",
    "section": "5.1 wb_set_col_widths",
    "text": "5.1 wb_set_col_widths\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet() %&gt;%\n  wb_add_data(x = mtcars, row_names = TRUE)\n\ncols &lt;- 1:12\nwb &lt;- wb %&gt;% wb_set_col_widths(cols = cols, widths = \"auto\")"
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#add-borders",
    "href": "chapters/openxlsx2_style_manual.html#add-borders",
    "title": "3¬† styling",
    "section": "6.1 add borders",
    "text": "6.1 add borders\n\nwb &lt;- wb_workbook()\n# full inner grid\nwb$add_worksheet(\"S1\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(\n  dims = \"A2:K33\",\n  inner_hgrid = \"thin\", inner_hcolor = wb_color(hex = \"FF808080\"),\n  inner_vgrid = \"thin\", inner_vcolor = wb_color(hex = \"FF808080\")\n)\n# only horizontal grid\nwb$add_worksheet(\"S2\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(dims = \"A2:K33\", inner_hgrid = \"thin\", inner_hcolor = wb_color(hex = \"FF808080\"))\n# only vertical grid\nwb$add_worksheet(\"S3\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(dims = \"A2:K33\", inner_vgrid = \"thin\", inner_vcolor = wb_color(hex = \"FF808080\"))\n# no inner grid\nwb$add_worksheet(\"S4\", grid_lines = FALSE)$add_data(x = mtcars)\nwb$add_border(\"S4\", dims = \"A2:K33\")"
  },
  {
    "objectID": "chapters/openxlsx2_style_manual.html#styled-table",
    "href": "chapters/openxlsx2_style_manual.html#styled-table",
    "title": "3¬† styling",
    "section": "6.2 styled table",
    "text": "6.2 styled table\nBelow we show you two ways how to create styled tables with openxlsx2 one using the high level functions to style worksheet areas and one using the bare metal approach of creating the identical table.\n\n\n\n\n\n\n6.2.1 the quick way: using high level functions\n\n# add some dummy data to the worksheet\nmat &lt;- matrix(1:4, ncol = 2, nrow = 2)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"test\") %&gt;%\n  wb_add_data(x = mat, col_names = TRUE, start_col = 2, start_row = 2) %&gt;%\n  # center first row\n  wb_add_cell_style(dims = \"B2:C2\", horizontal = \"center\") %&gt;%\n  # add border for first row\n  wb_add_border(\n    dims = \"B2:C2\",\n    bottom_color = wb_color(theme = 1), bottom_border = \"thin\",\n    top_color = wb_color(theme = 1), top_border = \"double\",\n    left_border = NULL, right_border = NULL\n  ) %&gt;%\n  # add border for last row\n  wb_add_border(\n    dims = \"B4:C4\",\n    bottom_color = wb_color(theme = 1), bottom_border = \"double\",\n    top_border = NULL, left_border = NULL, right_border = NULL\n  )\n\n\n\n6.2.2 the long way: creating everything from the bone\n\n# add some dummy data to the worksheet\nmat &lt;- matrix(1:4, ncol = 2, nrow = 2)\ncolnames(mat) &lt;- make.names(seq_len(ncol(mat)))\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"test\") %&gt;%\n  wb_add_data(x = mat, start_col = 2, start_row = 2)\n\n# create a border style and assign it to the workbook\nblack &lt;- wb_color(hex = \"FF000000\")\ntop_border &lt;- create_border(\n  top = \"double\", top_color = black,\n  bottom = \"thin\", bottom_color = black\n)\n\nbottom_border &lt;- create_border(bottom = \"double\", bottom_color = black)\n\nwb$styles_mgr$add(top_border, \"top_border\")\nwb$styles_mgr$add(bottom_border, \"bottom_border\")\n\n# create a new cell style, that uses the fill, the font and the border style\ntop_cellxfs &lt;- create_cell_style(\n  numFmtId = 0,\n  horizontal = \"center\",\n  borderId = wb$styles_mgr$get_border_id(\"top_border\")\n)\nbottom_cellxfs &lt;- create_cell_style(\n  numFmtId = 0,\n  borderId = wb$styles_mgr$get_border_id(\"bottom_border\")\n)\n\n# assign this style to the workbook\nwb$styles_mgr$add(top_cellxfs, \"top_styles\")\nwb$styles_mgr$add(bottom_cellxfs, \"bottom_styles\")\n\n# assign the new cell style to the header row of our data set\ncell &lt;- \"B2:C2\"\nwb &lt;- wb %&gt;% wb_set_cell_style(dims = cell, style = wb$styles_mgr$get_xf_id(\"top_styles\"))\ncell &lt;- \"B4:C4\"\nwb &lt;- wb %&gt;% wb_set_cell_style(dims = cell, style = wb$styles_mgr$get_xf_id(\"bottom_styles\"))"
  },
  {
    "objectID": "chapters/conditional-formatting.html",
    "href": "chapters/conditional-formatting.html",
    "title": "4¬† Conditional Formatting",
    "section": "",
    "text": "5 Databars\nwb$add_worksheet(\"databar\")\n## Databars\nwb$add_data(\"databar\", -5:5, start_col = 1)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"A1:A11\",\n  type = \"dataBar\"\n) ## Default colors\n\nwb$add_data(\"databar\", -5:5, start_col = 3)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"A1:A10\",\n  type = \"dataBar\",\n  params = list(\n    showValue = FALSE,\n    gradient = FALSE\n  )\n) ## Default colors\n\nwb$add_data(\"databar\", -5:5, start_col = 5)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"E1:E11\",\n  type = \"dataBar\",\n  style = c(\"#a6a6a6\"),\n  params = list(showValue = FALSE)\n)\n\nwb$add_data(\"databar\", -5:5, start_col = 7)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = \"G1:G11\",\n  type = \"dataBar\",\n  style = c(\"red\"),\n  params = list(\n    showValue = TRUE,\n    gradient = FALSE\n  )\n)\n\n# custom color\nwb$add_data(\"databar\", -5:5, start_col = 9)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = wb_dims(cols = 9, rows = 1:11),\n  type = \"dataBar\",\n  style = c(\"#a6a6a6\", \"#a6a6a6\"),\n  params = list(showValue = TRUE, gradient = FALSE)\n)\n\n# with rule\nwb$add_data(x = -5:5, start_col = 11)\nwb &lt;- wb_add_conditional_formatting(\n  wb,\n  \"databar\",\n  dims = wb_dims(cols = 11, rows = 1:11),\n  type = \"dataBar\",\n  rule = c(0, 5),\n  style = c(\"#a6a6a6\", \"#a6a6a6\"),\n  params = list(showValue = TRUE, gradient = FALSE)\n)\nsl &lt;- create_sparklines(\"Sheet 1\", \"A3:K3\", \"L3\")\nwb &lt;- wb_workbook() %&gt;%\n   wb_add_worksheet() %&gt;%\n   wb_add_data(x = mtcars) %&gt;%\n   wb_add_sparklines(sparklines = sl)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#rule-applies-to-all-each-cell-in-range",
    "href": "chapters/conditional-formatting.html#rule-applies-to-all-each-cell-in-range",
    "title": "4¬† Conditional Formatting",
    "section": "4.1 Rule applies to all each cell in range",
    "text": "4.1 Rule applies to all each cell in range\n\n\n\n\n\n\nwb$add_worksheet(\"cellIs\")\nwb$add_data(\"cellIs\", -5:5)\nwb$add_data(\"cellIs\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"cellIs\",\n  dims = \"A1:A11\",\n  rule = \"!=0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"cellIs\",\n  dims = \"A1:A11\",\n  rule = \"==0\",\n  style = \"posStyle\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#highlight-row-dependent-on-first-cell-in-row",
    "href": "chapters/conditional-formatting.html#highlight-row-dependent-on-first-cell-in-row",
    "title": "4¬† Conditional Formatting",
    "section": "4.2 Highlight row dependent on first cell in row",
    "text": "4.2 Highlight row dependent on first cell in row\n\n\n\n\n\n\nwb$add_worksheet(\"Moving Row\")\nwb$add_data(\"Moving Row\", -5:5)\nwb$add_data(\"Moving Row\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"Moving Row\",\n  dims = \"A1:B11\",\n  rule = \"$A1&lt;0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Moving Row\",\n  dims = \"A1:B11\",\n  rule = \"$A1&gt;0\",\n  style = \"posStyle\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#highlight-column-dependent-on-first-cell-in-column",
    "href": "chapters/conditional-formatting.html#highlight-column-dependent-on-first-cell-in-column",
    "title": "4¬† Conditional Formatting",
    "section": "4.3 Highlight column dependent on first cell in column",
    "text": "4.3 Highlight column dependent on first cell in column\n\n\n\n\n\n\nwb$add_worksheet(\"Moving Col\")\nwb$add_data(\"Moving Col\", -5:5)\nwb$add_data(\"Moving Col\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"Moving Col\",\n  dims = \"A1:B11\",\n  rule = \"A$1&lt;0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Moving Col\",\n  dims = \"A1:B11\",\n  rule = \"A$1&gt;0\",\n  style = \"posStyle\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#highlight-entire-range-cols-x-rows-dependent-only-on-cell-a1",
    "href": "chapters/conditional-formatting.html#highlight-entire-range-cols-x-rows-dependent-only-on-cell-a1",
    "title": "4¬† Conditional Formatting",
    "section": "4.4 Highlight entire range cols X rows dependent only on cell A1",
    "text": "4.4 Highlight entire range cols X rows dependent only on cell A1\n\n\n\n\n\n\nwb$add_worksheet(\"Dependent on\")\nwb$add_data(\"Dependent on\", -5:5)\nwb$add_data(\"Dependent on\", LETTERS[1:11], start_col = 2)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A1:B11\",\n  rule = \"$A$1 &lt; 0\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A1:B11\",\n  rule = \"$A$1&gt;0\",\n  style = \"posStyle\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#highlight-cells-in-column-1-based-on-value-in-column-2",
    "href": "chapters/conditional-formatting.html#highlight-cells-in-column-1-based-on-value-in-column-2",
    "title": "4¬† Conditional Formatting",
    "section": "4.5 Highlight cells in column 1 based on value in column 2",
    "text": "4.5 Highlight cells in column 1 based on value in column 2\n\nwb$add_data(\"Dependent on\", data.frame(x = 1:10, y = runif(10)), startRow = 15)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A16:A25\",\n  rule = \"B16&lt;0.5\",\n  style = \"negStyle\"\n)\nwb$add_conditional_formatting(\n  \"Dependent on\",\n  dims = \"A16:A25\",\n  rule = \"B16&gt;=0.5\",\n  style = \"posStyle\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#highlight-duplicates-using-default-style",
    "href": "chapters/conditional-formatting.html#highlight-duplicates-using-default-style",
    "title": "4¬† Conditional Formatting",
    "section": "4.6 Highlight duplicates using default style",
    "text": "4.6 Highlight duplicates using default style\n\n\n\n\n\n\nwb$add_worksheet(\"Duplicates\")\nwb$add_data(\"Duplicates\", sample(LETTERS[1:15], size = 10, replace = TRUE))\nwb$add_conditional_formatting(\n  \"Duplicates\",\n  dims = \"A1:A10\",\n  type = \"duplicatedValues\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#cells-containing-text",
    "href": "chapters/conditional-formatting.html#cells-containing-text",
    "title": "4¬† Conditional Formatting",
    "section": "4.7 Cells containing text",
    "text": "4.7 Cells containing text\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_worksheet(\"containsText\")\nwb$add_data(\"containsText\", sapply(1:10, fn))\nwb$add_conditional_formatting(\n  \"containsText\",\n  dim = \"A1:A10\",\n  type = \"containsText\",\n  rule = \"A\"\n)\nwb$add_worksheet(\"notcontainsText\")"
  },
  {
    "objectID": "chapters/conditional-formatting.html#cells-not-containing-text",
    "href": "chapters/conditional-formatting.html#cells-not-containing-text",
    "title": "4¬† Conditional Formatting",
    "section": "4.8 Cells not containing text",
    "text": "4.8 Cells not containing text\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_data(\"notcontainsText\", x = sapply(1:10, fn))\nwb$add_conditional_formatting(\n  \"notcontainsText\",\n  dim = \"A1:A10\",\n  type = \"notContainsText\",\n  rule = \"A\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#cells-begins-with-text",
    "href": "chapters/conditional-formatting.html#cells-begins-with-text",
    "title": "4¬† Conditional Formatting",
    "section": "4.9 Cells begins with text",
    "text": "4.9 Cells begins with text\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_worksheet(\"beginsWith\")\nwb$add_data(\"beginsWith\", x = sapply(1:100, fn))\nwb$add_conditional_formatting(\n  \"beginsWith\",\n  dim = \"A1:A100\",\n  type = \"beginsWith\",\n  rule = \"A\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#cells-ends-with-text",
    "href": "chapters/conditional-formatting.html#cells-ends-with-text",
    "title": "4¬† Conditional Formatting",
    "section": "4.10 Cells ends with text",
    "text": "4.10 Cells ends with text\n\n\n\n\n\n\nfn &lt;- function(x) paste(sample(LETTERS, 10), collapse = \"-\")\nwb$add_worksheet(\"endsWith\")\nwb$add_data(\"endsWith\", x = sapply(1:100, fn))\nwb$add_conditional_formatting(\n  \"endsWith\",\n  dim = \"A1:A100\",\n  type = \"endsWith\",\n  rule = \"A\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#colorscale-colors-cells-based-on-cell-value",
    "href": "chapters/conditional-formatting.html#colorscale-colors-cells-based-on-cell-value",
    "title": "4¬† Conditional Formatting",
    "section": "4.11 Colorscale colors cells based on cell value",
    "text": "4.11 Colorscale colors cells based on cell value\n\n\n\n\n\nYep, that is a color scale image.\n\n\n\n\n\ndf &lt;- read_xlsx(\"https://github.com/JanMarvin/openxlsx-data/raw/main/readTest.xlsx\", sheet = 5)\nwb$add_worksheet(\"colorScale\", zoom = 30)\nwb$add_data(\"colorScale\", x = df, col_names = FALSE) ## write data.frame\n\nRule is a vector or colors of length 2 or 3 (any hex color or any of colors()). If rule is NULL, min and max of cells is used. Rule must be the same length as style or L.\n\nwb$add_conditional_formatting(\n  \"colorScale\",\n  dims = wb_dims(x = df, col_names = FALSE),\n  style = c(\"black\", \"white\"),\n  rule = c(0, 255),\n  type = \"colorScale\"\n)\nwb$set_col_widths(\"colorScale\", cols = seq_along(df), widths = 1.07)\nwb$set_row_heights(\"colorScale\", rows = seq_len(nrow(df)), heights = 7.5)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#between",
    "href": "chapters/conditional-formatting.html#between",
    "title": "4¬† Conditional Formatting",
    "section": "4.12 Between",
    "text": "4.12 Between\n\n\n\n\n\nHighlight cells in interval [-2, 2]\n\nwb$add_worksheet(\"between\")\nwb$add_data(\"between\", -5:5)\nwb$add_conditional_formatting(\n  \"between\",\n  dims = \"A1:A11\",\n  type = \"between\",\n  rule = c(-2, 2)\n)\nwb$add_worksheet(\"topN\")"
  },
  {
    "objectID": "chapters/conditional-formatting.html#top-n",
    "href": "chapters/conditional-formatting.html#top-n",
    "title": "4¬† Conditional Formatting",
    "section": "4.13 Top N",
    "text": "4.13 Top N\n\n\n\n\n\n\nwb$add_data(\"topN\", data.frame(x = 1:10, y = rnorm(10)))\n\nHighlight top 5 values in column x\n\nwb$add_conditional_formatting(\n  \"topN\",\n  dims = \"A2:A11\",\n  style = \"posStyle\",\n  type = \"topN\",\n  params = list(rank = 5)\n)\n\nHighlight top 20 percentage in column y\n\nwb$add_conditional_formatting(\n  \"topN\",\n  dims = \"B2:B11\",\n  style = \"posStyle\",\n  type = \"topN\",\n  params = list(rank = 20, percent = TRUE)\n)\nwb$add_worksheet(\"bottomN\")"
  },
  {
    "objectID": "chapters/conditional-formatting.html#bottom-n",
    "href": "chapters/conditional-formatting.html#bottom-n",
    "title": "4¬† Conditional Formatting",
    "section": "4.14 Bottom N",
    "text": "4.14 Bottom N\n\n\n\n\n\n\nwb$add_data(\"bottomN\", data.frame(x = 1:10, y = rnorm(10)))\n\nHighlight bottom 5 values in column x\n\nwb$add_conditional_formatting(\n  \"bottomN\",\n  dims = \"A2:A11\",\n  style = \"negStyle\",\n  type = \"bottomN\",\n  params = list(rank = 5)\n)\n\nHighlight bottom 20 percentage in column y\n\nwb$add_conditional_formatting(\n  \"bottomN\",\n  dims = \"B2:B11\",\n  style = \"negStyle\",\n  type = \"bottomN\",\n  params = list(rank = 20, percent = TRUE)\n)\nwb$add_worksheet(\"logical operators\")"
  },
  {
    "objectID": "chapters/conditional-formatting.html#logical-operators",
    "href": "chapters/conditional-formatting.html#logical-operators",
    "title": "4¬† Conditional Formatting",
    "section": "4.15 Logical Operators",
    "text": "4.15 Logical Operators\n\n\n\n\n\nYou can use Excels logical Operators\n\nwb$add_data(\"logical operators\", 1:10)\nwb$add_conditional_formatting(\n  \"logical operators\",\n  dims = \"A1:A10\",\n  rule = \"OR($A1=1,$A1=3,$A1=5,$A1=7)\"\n)"
  },
  {
    "objectID": "chapters/conditional-formatting.html#not-contains-blanks",
    "href": "chapters/conditional-formatting.html#not-contains-blanks",
    "title": "4¬† Conditional Formatting",
    "section": "4.16 (Not) Contains Blanks",
    "text": "4.16 (Not) Contains Blanks\n\n\n\n\n\n\nwb$add_worksheet(\"contains blanks\")\nwb$add_data(x = c(NA, 1, 2, ''), colNames = FALSE, na.strings = NULL)\nwb$add_data(x = c(NA, 1, 2, ''), colNames = FALSE, na.strings = NULL, start_col = 2)\nwb$add_conditional_formatting(dims = \"A1:A4\", type = \"containsBlanks\")\nwb$add_conditional_formatting(dims = \"B1:B4\", type = \"notContainsBlanks\")"
  },
  {
    "objectID": "chapters/conditional-formatting.html#not-contains-errors",
    "href": "chapters/conditional-formatting.html#not-contains-errors",
    "title": "4¬† Conditional Formatting",
    "section": "4.17 (Not) Contains Errors",
    "text": "4.17 (Not) Contains Errors\n\n\n\n\n\n\nwb$add_worksheet(\"contains errors\")\nwb$add_data(x = c(1, NaN), colNames = FALSE)\nwb$add_data(x = c(1, NaN), colNames = FALSE, start_col = 2)\nwb$add_conditional_formatting(dims = \"A1:A3\", type = \"containsErrors\")\nwb$add_conditional_formatting(dims = \"A1:A3\", type = \"notContainsErrors\")"
  },
  {
    "objectID": "chapters/conditional-formatting.html#iconset",
    "href": "chapters/conditional-formatting.html#iconset",
    "title": "4¬† Conditional Formatting",
    "section": "4.18 Iconset",
    "text": "4.18 Iconset\n\n\n\n\n\n\nwb$add_worksheet(\"iconset\")\nwb$add_data(x = c(100, 50, 30), colNames = FALSE)\nwb$add_conditional_formatting(\n  dims = \"A1:A6\",\n  rule = c(-67, -33, 0, 33, 67),\n  type = \"iconSet\",\n  params = list(\n    percent = FALSE,\n    iconSet = \"5Arrows\",\n    reverse = TRUE)\n  )"
  },
  {
    "objectID": "chapters/conditional-formatting.html#unique-values",
    "href": "chapters/conditional-formatting.html#unique-values",
    "title": "4¬† Conditional Formatting",
    "section": "4.19 Unique Values",
    "text": "4.19 Unique Values\n\n\n\n\n\n\nwb$add_worksheet(\"unique values\")\nwb$add_data(x = c(1:4, 1:2), colNames = FALSE)\nwb$add_conditional_formatting(dims = \"A1:A6\", type = \"uniqueValues\")"
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html#add-plot-to-workbook",
    "href": "chapters/openxlsx2_charts_manual.html#add-plot-to-workbook",
    "title": "5¬† charts",
    "section": "5.1 Add plot to workbook",
    "text": "5.1 Add plot to workbook\nYou can include any image in PNG or JPEG format. Simply open a device and save the output and pass it to the worksheet with wb_add_image().\n\nmyplot &lt;- tempfile(fileext = \".jpg\")\njpeg(myplot)\nprint(plot(AirPassengers))\n#&gt; NULL\ndev.off()\n#&gt; png \n#&gt;   2\n\n# Add basic plots to the workbook\nwb$add_worksheet(\"add_image\")$add_image(file = myplot)"
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html#add-ggplot2-plot-to-workbook",
    "href": "chapters/openxlsx2_charts_manual.html#add-ggplot2-plot-to-workbook",
    "title": "5¬† charts",
    "section": "5.2 Add {ggplot2} plot to workbook",
    "text": "5.2 Add {ggplot2} plot to workbook\nYou can include {ggplot2} plots similar to how you would include them with openxlsx. Call the plot first and afterwards use wb_add_plot().\n\nif (requireNamespace(\"ggplot2\")) {\n\nlibrary(ggplot2)\n\nprint(ggplot(mtcars, aes(x = mpg, fill = as.factor(gear))) +\n  ggtitle(\"Distribution of Gas Mileage\") +\n  geom_density(alpha = 0.5))\n\n# Add ggplot to the workbook\nwb$add_worksheet(\"add_plot\")$\n  add_plot(width = 5, height = 3.5, fileType = \"png\", units = \"in\")\n\n}\n#&gt; Loading required namespace: ggplot2"
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html#add-plot-via-rvg",
    "href": "chapters/openxlsx2_charts_manual.html#add-plot-via-rvg",
    "title": "5¬† charts",
    "section": "5.3 Add plot via {rvg}",
    "text": "5.3 Add plot via {rvg}\nIf you want vector graphics that can be modified in spreadsheet software the dml_xlsx() device comes in handy. You can pass the output via wb_add_drawing().\n\nif (requireNamespace(\"ggplot2\") && requireNamespace(\"rvg\")) {\n\nlibrary(rvg)\n\n## create rvg example\ntmp &lt;- tempfile(fileext = \".xml\")\ndml_xlsx(file =  tmp, fonts = list(sans = \"Bradley Hand\"))\nprint(ggplot(data = iris,\n       mapping = aes(x = Sepal.Length, y = Petal.Width)) +\n  geom_point() + labs(title = \"With font Bradley Hand\") +\n  theme_minimal(base_family = \"sans\", base_size = 18))\ndev.off()\n\n# Add rvg to the workbook\nwb$add_worksheet(\"add_drawing\")$\n  add_drawing(xml = tmp)$\n  add_drawing(xml = tmp, dims = NULL)\n\n}\n#&gt; Loading required namespace: rvg"
  },
  {
    "objectID": "chapters/openxlsx2_charts_manual.html#add-mschart-plots",
    "href": "chapters/openxlsx2_charts_manual.html#add-mschart-plots",
    "title": "5¬† charts",
    "section": "5.4 Add {mschart} plots",
    "text": "5.4 Add {mschart} plots\nIf you want native open xml charts, have a look at {mschart}. Create one of the chart files and pass it to the workbook with wb_add_mschart(). There are two options possible. 1. Either the default {mschart} output identical to the one in {officer}. Passing a data object and let {mschart} prepare the data. In this case wb_add_mschart() will add a new data region. 2. Passing a wb_data() object to {mschart}. This object contains references to the data on the worksheet and allows using data ‚Äúas is‚Äù.\n\nif (requireNamespace(\"mschart\")) {\n\nlibrary(mschart) # mschart &gt;= 0.4 for openxlsx2 support\n\n## create chart from mschart object (this creates new input data)\nmylc &lt;- ms_linechart(\n  data = browser_ts,\n  x = \"date\",\n  y = \"freq\",\n  group = \"browser\"\n)\n\nwb$add_worksheet(\"add_mschart\")$add_mschart(dims = \"A10:G25\", graph = mylc)\n\n\n## create chart referencing worksheet cells as input\n# write data starting at B2\nwb$add_worksheet(\"add_mschart - wb_data\")$\n  add_data(x = mtcars, dims = \"B2\")$\n  add_data(x = data.frame(name = rownames(mtcars)), dims = \"A2\")\n\n# create wb_data object this will tell this mschart\n# from this PR to create a file corresponding to openxlsx2\ndat &lt;- wb_data(wb, dims = \"A2:G10\")\n\n# create a few mscharts\nscatter_plot &lt;- ms_scatterchart(\n  data = dat,\n  x = \"mpg\",\n  y = c(\"disp\", \"hp\")\n)\n\nbar_plot &lt;- ms_barchart(\n  data = dat,\n  x = \"name\",\n  y = c(\"disp\", \"hp\")\n)\n\narea_plot &lt;- ms_areachart(\n  data = dat,\n  x = \"name\",\n  y = c(\"disp\", \"hp\")\n)\n\nline_plot &lt;- ms_linechart(\n  data = dat,\n  x = \"name\",\n  y = c(\"disp\", \"hp\"),\n  labels = c(\"disp\", \"hp\")\n)\n\n# add the charts to the data\nwb &lt;- wb %&gt;%\n  wb_add_mschart(dims = \"F4:L20\", graph = scatter_plot) %&gt;%\n  wb_add_mschart(dims = \"F21:L37\", graph = bar_plot) %&gt;%\n  wb_add_mschart(dims = \"M4:S20\", graph = area_plot) %&gt;%\n  wb_add_mschart(dims = \"M21:S37\", graph = line_plot)\n\n# add chartsheet\nwb &lt;- wb %&gt;%\n  wb_add_chartsheet() %&gt;%\n  wb_add_mschart(graph = scatter_plot)\n\n}\n#&gt; Loading required namespace: mschart"
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html",
    "href": "chapters/openxlsx2_formulas_manual.html",
    "title": "6¬† openxlsx2 formulas manual",
    "section": "",
    "text": "7 Simple formulas\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = \"SUM(A2, B2)\", dims = \"D2\")$\n  add_formula(x = \"A2 + B2\", dims = \"D3\")\n# wb$open()\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = \"A2:A7 * B2:B7\", dims = \"C2:C7\", array = TRUE)\n# wb$open()\nIn the example below we want to use MMULT() which creates a matrix multiplication. This requires us to write an array formula and to specify the region where the output will be written to.\nm1 &lt;- matrix(1:6, ncol = 2)\nm2 &lt;- matrix(7:12, nrow = 2)\n\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = m1, startCol = 1)$\n  add_data(x = m2, startCol = 4)$\n  add_formula(x = \"MMULT(A2:B4, D2:F3)\", dims = \"H2:J4\", array = TRUE)\n# wb$open()\nSimilar a the coefficients of a linear regression\n# we expect to find this in D1:E1\ncoef(lm(head(cars)))\n#&gt; (Intercept)        dist \n#&gt;   5.2692308   0.1153846\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = \"LINEST(A2:A7, B2:B7, TRUE)\", dims = \"D2:E2\", array = TRUE)\n# wb$open()\n# wb_add_ignore_error()\nSimilar to array formulas, these cell metadata (cm) formulas hide to the user that they are array formulas. Using these is implemented in openxlsx2 &gt; 0.6.1:\nwb &lt;- wb_workbook()$add_worksheet()$\n  add_data(x = head(cars))$\n  add_formula(x = 'SUM(ABS(A2:A7))', dims = \"D2\", cm = TRUE)\n#&gt; Warning in write_data2(wb = wb, sheet = sheet, data = x, name = name, colNames\n#&gt; = colNames, : modifications with cm formulas are experimental. use at own risk\n# wb$open()"
  },
  {
    "objectID": "chapters/openxlsx2_formulas_manual.html#footnotes",
    "href": "chapters/openxlsx2_formulas_manual.html#footnotes",
    "title": "6¬† openxlsx2 formulas manual",
    "section": "",
    "text": "this example was originally provided by @zykezero for openxlsx.‚Ü©Ô∏é"
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html#adding-pivot-tables",
    "href": "chapters/openxlsx2_pivot_tables.html#adding-pivot-tables",
    "title": "7¬† Pivot tables",
    "section": "7.1 Adding pivot tables",
    "text": "7.1 Adding pivot tables\n\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = esoph)\n\ndf &lt;- wb_data(wb)\n\nwb$add_pivot_table(df, rows = \"agegp\", cols = \"tobgp\", data = c(\"ncontrols\"))\nwb$add_pivot_table(df, rows = \"agegp\", data = c(\"ncontrols\", \"ncases\"))\nwb$add_pivot_table(df, rows = \"agegp\", cols = \"tobgp\", data = c(\"ncontrols\", \"ncases\"))\n\n\nwb &lt;- wb_workbook()$\n  add_worksheet()$\n  add_data(x = mtcars)\n\ndf &lt;- wb_data(wb)\n\nwb$add_pivot_table(df, dims = \"A1\", rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"))\nwb$add_pivot_table(df, dims = \"A10\", sheet = 2, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"), fun = \"count\")\nwb$add_pivot_table(df, dims = \"A20\", sheet = 2, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"), fun = \"average\")\nwb$add_pivot_table(df, dims = \"A30\", sheet = 2, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"), fun = c(\"sum\", \"average\"))\n\n\n## Pivot table example 1\nwb &lt;- wb_workbook() %&gt;% wb_add_worksheet() %&gt;% wb_add_data(x = mtcars, inline_strings = F)\n\ndf &lt;- wb_data(wb)\n\n# basic pivot table with filter, rows, cols and data\nwb$add_pivot_table(df, dims = \"A3\", filter = \"mpg\", rows = \"cyl\", cols = \"gear\", data = \"disp\")\n\n# same pivot table, but with \"count\" instead of \"sum\" and no style\nwb$add_pivot_table(df, dims = \"A10\", sheet = 2, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\", \"am\"), fun = \"count\", params = list(no_style = TRUE))\n\n# nested pivot table with two variables for column, row and data and two different functions\n# uses an autoformatid (not that I like it, just because I can do it)\nwb$add_pivot_table(df, dims = \"A20\", sheet = 2, rows = c(\"cyl\", \"mpg\"), cols = c(\"vs\",\"gear\"), data = c(\"disp\", \"hp\"), fun = c(\"sum\", \"average\"),\n                   params = list(applyAlignmentFormats   = \"1\",\n                                 applyNumberFormats      = \"1\",\n                                 applyBorderFormats      = \"1\",\n                                 applyFontFormats        = \"1\",\n                                 applyPatternFormats     = \"1\",\n                                 applyWidthHeightFormats = \"1\",\n                                 autoFormatId = \"4099\"))\n\n# multiple filters on a pivot table\nwb$add_pivot_table(df, dims = \"A3\", filter = c(\"am\", \"vs\", \"mpg\", \"hp\", \"wt\"), rows = \"cyl\", cols = \"gear\", data = \"disp\")\n\n# using custom caption\nwb$add_pivot_table(df, dims = \"A20\", sheet = 3, rows = \"cyl\", cols = \"gear\", data = c(\"disp\", \"hp\"), params = list(colHeaderCaption = \"test caption\"))\n\n# wb$open()\n\n\n## Pivot table example 2\n# pivot table with blanks and character variables on column and row\nwb &lt;- wb_workbook()$add_worksheet()$add_data(x = esoph)\ndf &lt;- wb_data(wb, dims = \"A1:E95\")\nwb$add_pivot_table(df, rows = \"agegp\", cols = \"tobgp\", data = c(\"ncontrols\"))\n# wb$open()\n\n\n# original pivot table as reference\nlibrary(pivottabler)\n\npt &lt;- PivotTable$new()\npt$addData(bhmtrains) \npt$addColumnDataGroups(\"TrainCategory\") \npt$addRowDataGroups(\"TOC\", \n                    outlineBefore=list(isEmpty=FALSE, groupStyleDeclarations=list(color=\"blue\")), \n                    outlineTotal=list(isEmpty=FALSE, groupStyleDeclarations=list(color=\"blue\"))) \npt$addRowDataGroups(\"PowerType\", addTotal=FALSE) \npt$defineCalculation(calculationName=\"TotalTrains\", summariseExpression=\"n()\")\n\n\n\n\n\n\n\n# use A:P\nwb &lt;- wb_workbook()$add_worksheet()$add_data(x = bhmtrains, na.strings = NULL)\ndf &lt;- wb_data(wb, dims = \"A:P\")\n\n# use TrainCategory on column and data\nwb$add_pivot_table(\n  df, \n  rows = c(\"TOC\", \"PowerType\"),\n  cols = \"TrainCategory\",\n  data = \"TrainCategory\",\n  fun = \"count\"\n)\n# wb$open()\n\n\n## Pivot table example 1\nwb &lt;- wb_workbook() %&gt;% wb_add_worksheet() %&gt;% wb_add_data(x = mtcars, inline_strings = F)\n\nwb$add_numfmt(dims = wb_dims(x = mtcars, cols = \"disp\"), numfmt = \"$ #,###\")\n\ndf &lt;- wb_data(wb)\n\n# basic pivot table with filter, rows, cols and data\nwb$add_pivot_table(\n  df,\n  rows = \"cyl\", cols = \"gear\",\n  data = c(\"disp\", \"hp\"),\n  fun = c(\"sum\", \"count\"),\n  params = list(\n    numfmt = c(formatCode = \"$ ###\", formatCode = \"#\")\n  ))"
  },
  {
    "objectID": "chapters/openxlsx2_pivot_tables.html#adding-slicers-to-pivot-tables",
    "href": "chapters/openxlsx2_pivot_tables.html#adding-slicers-to-pivot-tables",
    "title": "7¬† Pivot tables",
    "section": "7.2 Adding slicers to pivot tables",
    "text": "7.2 Adding slicers to pivot tables\nSince openxlsx2 1.1 it is possible to add slicers to pivot tables created with wb_add_pivot_tables().\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet() %&gt;% wb_add_data(x = mtcars)\n\ndf &lt;- wb_data(wb, sheet = 1)\n\nwb$\n  add_pivot_table(\n    df, dims = \"A3\", slicer = \"vs\", rows = \"cyl\", cols = \"gear\", data = \"disp\",\n    pivot_table = \"mtcars\"\n  )$\n  add_slicer(x = df, dims = \"B7:D9\", slicer = \"vs\", pivot_table = \"mtcars\",\n             params = list(edit_as = \"twoCell\"))\n\nif (interactive()) wb$open()\n\n\nwb &lt;- wb_workbook() %&gt;%\n  ### Sheet 1\n  wb_add_worksheet() %&gt;%\n  wb_add_data(x = mtcars)\n\ndf &lt;- wb_data(wb, sheet = 1)\n\nvarname &lt;- c(\"vs\", \"drat\")\n\n### Sheet 2\nwb$\n  # first pivot\n  add_pivot_table(\n    df, dims = \"A3\", slicer = varname, rows = \"cyl\", cols = \"gear\", data = \"disp\",\n    pivot_table = \"mtcars\"\n  )$\n  add_slicer(x = df, sheet = current_sheet(), slicer = \"vs\", pivot_table = \"mtcars\")$\n  add_slicer(x = df, dims = \"B18:D24\", sheet = current_sheet(), slicer = \"drat\", pivot_table = \"mtcars\",\n             params = list(columnCount = 5))$\n  # second pivot\n  add_pivot_table(\n    df, dims = \"G3\", sheet = current_sheet(), slicer = varname, rows = \"gear\", cols = \"carb\", data = \"mpg\",\n    pivot_table = \"mtcars2\"\n  )$\n  add_slicer(x = df, dims = \"G12:I16\", slicer = \"vs\", pivot_table = \"mtcars2\",\n             params = list(sortOrder = \"descending\", caption = \"Wow!\"))\n\n### Sheet 3\nwb$\n  add_pivot_table(\n    df, dims = \"A3\", slicer = varname, rows = \"gear\", cols = \"carb\", data = \"mpg\",\n    pivot_table = \"mtcars3\"\n  )$\n  add_slicer(x = df, dims = \"A12:D16\", slicer = \"vs\", pivot_table = \"mtcars3\")\n  \nif (interactive()) wb$open()\n\n\n\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"table\") %&gt;%\n  wb_add_worksheet(\"data\") %&gt;%\n  wb_add_data(x = datasets::esoph)\n\ndf &lt;- wb_data(wb)\n\n# add a pivot table and a slicer and preselect\n# a few cases and style it a bit\nwb &lt;- wb %&gt;%\n  wb_add_pivot_table(\n    df, dims = \"A3\", sheet = \"table\",\n    rows = \"agegp\", cols = \"tobgp\", data = \"ncases\",\n    slicer = \"alcgp\", pivot_table = \"pt1\",\n    param = list(\n      show_data_as = c(\"percentOfRow\"),\n      numfmt = c(formatCode = \"0.0%\"),\n      compact = FALSE, outline = FALSE, compactData = FALSE,\n      rowGrandTotals = FALSE, colGrandTotals = FALSE,\n      choose = c(agegp = 'x &gt; \"25-34\"')\n    )\n  ) %&gt;% \n  wb_add_slicer(\n    x = df, dims = \"B14:D18\", \n    slicer = \"alcgp\", pivot_table = \"pt1\", \n    param = list(\n      columnCount = 2,\n      choose = c(alcgp = 'x %in% c(\"40-79\", \"80-119\")')\n    )\n  )\n\nif (interactive()) wb$open()"
  },
  {
    "objectID": "chapters/openxlsx2_form_control.html",
    "href": "chapters/openxlsx2_form_control.html",
    "title": "8¬† Form control",
    "section": "",
    "text": "wb &lt;- wb_workbook()$\n    # Checkbox\n    add_worksheet()$\n    add_form_control(dims = \"B2\")$\n    add_form_control(dims = \"B3\", text = \"A text\")$\n    add_data(dims = \"A4\", x = 0, colNames = FALSE)$\n    add_form_control(dims = \"B4\", link = \"A4\")$\n    add_data(dims = \"A5\", x = TRUE, colNames = FALSE)$\n    add_form_control(dims = \"B5\", range = \"'Sheet 1'!A5\", link = \"B5\")$\n    # Radio\n    add_worksheet()$\n    add_form_control(dims = \"B2\", type = \"Radio\")$\n    add_form_control(dims = \"B3\", type = \"Radio\", text = \"A text\")$\n    add_data(dims = \"A4\", x = 0, colNames = FALSE)$\n    add_form_control(dims = \"B4\", type = \"Radio\", link = \"A4\")$\n    add_data(dims = \"A5\", x = 1, colNames = FALSE)$\n    add_form_control(dims = \"B5\", type = \"Radio\")$\n    # Drop\n    add_worksheet()$\n    add_form_control(dims = \"B2\", type = \"Drop\")$\n    add_form_control(dims = \"B3\", type = \"Drop\", text = \"A text\")$\n    add_data(dims = \"A4\", x = 0, colNames = FALSE)$\n    add_form_control(dims = \"B4\", type = \"Drop\", link = \"A1\", range = \"D4:D15\")$\n    add_data(dims = \"A5\", x = 1, colNames = FALSE)$\n    add_form_control(dims = \"B5\", type = \"Drop\", link = \"'Sheet 3'!D1:D26\", range = \"A1\")$\n    add_data(dims = \"D1\", x = letters)"
  },
  {
    "objectID": "chapters/openxlsx2_extending.html#msoc---encrypting-decrypting-workbooks",
    "href": "chapters/openxlsx2_extending.html#msoc---encrypting-decrypting-workbooks",
    "title": "9¬† Extending openxlsx2",
    "section": "9.1 msoc - Encrypting / Decrypting workbooks",
    "text": "9.1 msoc - Encrypting / Decrypting workbooks\nYou might want to look at msoc (Garbuszus 2023) for openxml file level encryption/decryption.\n\nlibrary(msoc)\n\nxlsx &lt;- temp_xlsx()\n\n# let us write some worksheet\nwb_workbook()$add_worksheet()$add_data(x = mtcars)$save(xlsx)\n\n# now we can encrypt it\nencrypt(xlsx, xlsx, pass = \"msoc\")\n#&gt; [1] \"/tmp/RtmpLdz5V5/temp_xlsx_1efa247d70c8.xlsx\"\n\n# the file is encrypted, we can not read it\ntry(wb &lt;- wb_load(xlsx))\n#&gt; Warning in unzip(file, exdir = xmlDir): error 1 in extracting from zip file\n#&gt; Error in wb_load(xlsx) : object 'sheets' not found\n\n# we have to decrypt it first\ndecrypt(xlsx, xlsx, pass = \"msoc\")\n#&gt; [1] \"/tmp/RtmpLdz5V5/temp_xlsx_1efa247d70c8.xlsx\"\n\n# now we can load it again\nwb_load(xlsx)$to_df() %&gt;% head()\n#&gt;    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; 2 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#&gt; 3 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; 4 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; 5 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; 6 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; 7 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1"
  },
  {
    "objectID": "chapters/openxlsx2_extending.html#flexlsx---exporting-flextable-to-workbooks",
    "href": "chapters/openxlsx2_extending.html#flexlsx---exporting-flextable-to-workbooks",
    "title": "9¬† Extending openxlsx2",
    "section": "9.2 flexlsx - Exporting flextable to workbooks",
    "text": "9.2 flexlsx - Exporting flextable to workbooks\nUsing flexlsx (Heidler 2023) you can extend openxlsx2 to write flextable(Gohel and Skintzos 2023).\n\nlibrary(flexlsx)\n\nwb &lt;- wb_workbook()$add_worksheet(\"mtcars\")\n\n# Create a flextable and an openxlsx2 workbook\nft &lt;- flextable::as_flextable(table(mtcars[,1:2]))\n\n# add the flextable ft to the workbook, sheet \"mtcars\"\n# offset the table to cell 'C2'\nwb &lt;- flexlsx::wb_add_flextable(wb, \"mtcars\", ft, dims = \"C2\")\n\nif (interactive()) wb$open()\n\n\n\n\n\nGarbuszus, Jan Marvin. 2023. Msoc: Encrypt and Decrypt of Office Open Xml Files.\n\n\nGohel, David, and Panagiotis Skintzos. 2023. Flextable: Functions for Tabular Reporting.\n\n\nHeidler, Tobias. 2023. Flexlsx: Exporting Flextables to Excel."
  },
  {
    "objectID": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-read-and-write-functions",
    "href": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-read-and-write-functions",
    "title": "10¬† Upgrade from openxlsx",
    "section": "10.1 Basic read and write functions",
    "text": "10.1 Basic read and write functions\nWelcome to the openxlsx2 update vignette. In this vignette we will take some common code examples from openxlsx and show you how similar results can be replicated in openxlsx2. Thank you for taking a look, and let‚Äôs get started. While previous openxlsx functions used the . in function calls, as well as camelCase, we have tried to switch to snake_case (this is still a work in progress, there may still be function arguments that use camelCase).\n\n10.1.1 Read xlsx or xlsm files\nThe basic read function changed from read.xlsx to read_xlsx. Using a default xlsx file included in the package:\n\nfile &lt;- system.file(\"extdata\", \"openxlsx2_example.xlsx\", package = \"openxlsx2\")\n\nThe old syntax looked like this:\n\n# read in openxlsx\nopenxlsx::read.xlsx(xlsxFile = file)\n\nThis has changed to this:\n\n# read in openxlsx2\nopenxlsx2::read_xlsx(file = file)\n#&gt;     Var1 Var2 NA  Var3  Var4       Var5         Var6    Var7     Var8\n#&gt; 3   TRUE    1 NA     1     a 2023-05-29 3209324 This #DIV/0! 01:27:15\n#&gt; 4   TRUE   NA NA #NUM!     b 2023-05-23         &lt;NA&gt;       0 14:02:57\n#&gt; 5   TRUE    2 NA  1.34     c 2023-02-01         &lt;NA&gt; #VALUE! 23:01:02\n#&gt; 6  FALSE    2 NA  &lt;NA&gt; #NUM!       &lt;NA&gt;         &lt;NA&gt;       2 17:24:53\n#&gt; 7  FALSE    3 NA  1.56     e       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 8  FALSE    1 NA   1.7     f 2023-03-02         &lt;NA&gt;     2.7 08:45:58\n#&gt; 9     NA   NA NA  &lt;NA&gt;  &lt;NA&gt;       &lt;NA&gt;         &lt;NA&gt;    &lt;NA&gt;     &lt;NA&gt;\n#&gt; 10 FALSE    2 NA    23     h 2023-12-24         &lt;NA&gt;      25     &lt;NA&gt;\n#&gt; 11 FALSE    3 NA  67.3     i 2023-12-25         &lt;NA&gt;       3     &lt;NA&gt;\n#&gt; 12    NA    1 NA   123  &lt;NA&gt; 2023-07-31         &lt;NA&gt;     122     &lt;NA&gt;\n\nAs you can see, we return the spreadsheet return codes (e.g., #NUM) in openxlsx2. Another thing to see above, we return the cell row as rowname for the data frame returned. openxlsx2 should return a data frame of the selected size, even if it empty. If you preferred openxlsx::readWorkbook() this has become wb_read(). All of these are wrappers for the newly introduced function wb_to_df() which provides the most options. read_xlsx() and wb_read() were created for backward comparability."
  },
  {
    "objectID": "chapters/openxlsx2_upgrade_from_openxlsx.html#write-xlsx-files",
    "href": "chapters/openxlsx2_upgrade_from_openxlsx.html#write-xlsx-files",
    "title": "10¬† Upgrade from openxlsx",
    "section": "10.2 Write xlsx files",
    "text": "10.2 Write xlsx files\nBasic writing in openxlsx2 behaves identical to openxlsx. Though be aware that overwrite is an optional parameter in openxlsx2 and just like in other functions like base::write.csv() if you write onto an existing file name, this file will be replaced.\nSetting the output to some temporary xlsx file\n\noutput &lt;- temp_xlsx()\n\nThe previous write function looks like this:\n\n# write in openxlsx\nopenxlsx::write.xlsx(iris, file = output, colNames = TRUE)\n\nThe new function looks quite similar:\n\n# write in openxlsx2\nopenxlsx2::write_xlsx(iris, file = output, col_names = TRUE)"
  },
  {
    "objectID": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-workbook-functions",
    "href": "chapters/openxlsx2_upgrade_from_openxlsx.html#basic-workbook-functions",
    "title": "10¬† Upgrade from openxlsx",
    "section": "10.3 Basic workbook functions",
    "text": "10.3 Basic workbook functions\nWorkbook functions have been renamed to begin with wb_ there are plenty of these in the package, therefore looking at the man pages seems to be the fastest way. Yet, it all begins with loading the workbook.\n\n10.3.1 Loading a workbook\nA major feature in openxlsx are workbooks. Obviously they remain a central piece in openxlsx2. Previous you would load them with:\n\nwb &lt;- openxlsx::loadWorkbook(file = file)\n\nIn openxlsx2 loading was changed to:\n\nwb &lt;- wb_load(file = file)\n\nThere are plenty of functions to interact with workbooks and we will not describe every single one here. A detailed list can be found over at our references\n\n\n10.3.2 Styles\nOne of the biggest user facing change was the removal of the stylesObject. In the following section we use code from openxlsx::addStyle()\n\n# openxlsx\n## Create a new workbook\nwb &lt;- createWorkbook(creator = \"My name here\")\naddWorksheet(wb, \"Expenditure\", gridLines = FALSE)\nwriteData(wb, sheet = 1, USPersonalExpenditure, rowNames = TRUE)\n\n## style for body\nbodyStyle &lt;- createStyle(border = \"TopBottom\", borderColor = \"#4F81BD\")\naddStyle(wb, sheet = 1, bodyStyle, rows = 2:6, cols = 1:6, gridExpand = TRUE)\n\n## set column width for row names column\nsetColWidths(wb, 1, cols = 1, widths = 21)\n\nIn openxlsx2 the same code looks something like this:\n\n# openxlsx2 chained\nborder_color &lt;- wb_color(hex = \"4F81BD\")\nwb &lt;- wb_workbook(creator = \"My name here\")$\n  add_worksheet(\"Expenditure\", grid_lines = FALSE)$\n  add_data(x = USPersonalExpenditure, row_names = TRUE)$\n  add_border( # add the outer and inner border\n    dims = \"A1:F6\",\n    top_border = \"thin\", top_color = border_color,\n    bottom_border = \"thin\", bottom_color = border_color,\n    inner_hgrid = \"thin\", inner_hcolor = border_color,\n    left_border = \"\", right_border = \"\"\n  )$\n  set_col_widths( # set column width\n    cols = 1:6,\n    widths = c(20, rep(10, 5))\n  )$ # remove the value in A1\n  add_data(dims = \"A1\", x = \"\")\n\nThe code above uses chaining. If you prefer piping, we provide the chained functions with the prefix wb_ so wb_add_worksheet(), wb_add_data(), wb_add_border() and wb_set_col_widths() would be the functions to use with pipes %&gt;% or |&gt;.\nWith pipes the code from above becomes\n\n# openxlsx2 with pipes\nborder_color &lt;- wb_color(hex = \"4F81BD\")\nwb &lt;- wb_workbook(creator = \"My name here\") %&gt;%\n  wb_add_worksheet(sheet = \"Expenditure\", grid_lines = FALSE) %&gt;%\n  wb_add_data(x = USPersonalExpenditure, row_names = TRUE) %&gt;%\n  wb_add_border( # add the outer and inner border\n    dims = \"A1:F6\",\n    top_border = \"thin\", top_color = border_color,\n    bottom_border = \"thin\", bottom_color = border_color,\n    inner_hgrid = \"thin\", inner_hcolor = border_color,\n    left_border = \"\", right_border = \"\"\n  ) %&gt;%\n  wb_set_col_widths( # set column width\n    cols = 1:6,\n    widths = c(20, rep(10, 5))\n  ) %&gt;% # remove the value in A1\n  wb_add_data(dims = \"A1\", x = \"\")\n\nBe aware that chains modify an object in place and pipes do not.\n\n# openxlsx2\nwbp &lt;- wb_workbook() %&gt;% wb_add_worksheet()\nwbc &lt;- wb_workbook()$add_worksheet()\n\n# need to assign wbp\nwbp &lt;- wbp %&gt;% wb_add_data(x = iris)\nwbc$add_data(x = iris)\n\nYou can re-use styles with wb_get_cell_style() and wb_set_cell_style(). Abandoning stylesObject in openxlsx2 has the huge benefit that we can import and export a spreadsheet without changing any cell style. It is still possible to modify a cell style with wb_add_border(), wb_add_fill(), wb_add_font() and wb_add_numfmt().\nAdditional examples regarding styles can be found in the styles vignette.\n\n\n10.3.3 Conditional formatting\nSee vignette(\"conditional-formatting\") for extended examples on formatting.\nHere is a minimal example:\n\n# openxlsx2 with chains\nwb &lt;- wb_workbook()$\n  add_worksheet(\"a\")$\n  add_data(x = 1:4, col_names = FALSE)$\n  add_conditional_formatting(dims = \"A1:A4\", rule = \"&gt;2\")\n\n# openxlsx2 with pipes\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"a\") %&gt;%\n  wb_add_data(x = 1:4, col_names = FALSE) %&gt;%\n  wb_add_conditional_formatting(dims = \"A1:A4\", rule = \"&gt;2\")\n\n\n\n10.3.4 Data validation\nSimilarly, data validation has been updated and improved. This openxlsx code for data validation\n\n# openxlsx\nwb &lt;- createWorkbook()\naddWorksheet(wb, \"Sheet 1\")\nwriteDataTable(wb, 1, x = iris[1:30, ])\ndataValidation(wb, 1,\n  col = 1:3, rows = 2:31, type = \"whole\",\n  operator = \"between\", value = c(1, 9)\n)\n\nlooks in openxlsx2 something like this:\n\n# openxlsx2 with chains\nwb &lt;- wb_workbook()$\n  add_worksheet(\"Sheet 1\")$\n  add_data_table(1, x = iris[1:30, ])$\n  add_data_validation(1,\n    dims = wb_dims(rows = 2:31, cols = 1:3),\n    # alternatively, dims can also be \"A2:C31\" if you know the span in your Excel workbook.\n    type = \"whole\",\n    operator = \"between\",\n    value = c(1, 9)\n  )\n\n# openxlsx2 with pipes\nwb &lt;- wb_workbook() %&gt;%\n  wb_add_worksheet(\"Sheet 1\") %&gt;%\n  wb_add_data_table(1, x = iris[1:30, ]) %&gt;%\n  wb_add_data_validation(\n    sheet = 1,\n    dims = \"A2:C31\", # alternatively, dims = wb_dims(rows = 2:31, cols = 1:3)\n    type = \"whole\",\n    operator = \"between\",\n    value = c(1, 9)\n  )\n\n\n\n10.3.5 Saving\nSaving has been switched from saveWorbook() to wb_save() and opening a workbook has been switched from openXL() to wb_open()."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Allen, Michael. 2023. Readxlsb: Read ‚ÄôExcel‚Äô Binary (.xlsb)\nWorkbooks. https://CRAN.R-project.org/package=readxlsb.\n\n\nBarbone, Jordan Mark, and Jan Marvin Garbuszus. 2023. Openxlsx2:\nRead, Write and Edit ‚ÄôXlsx‚Äô Files. https://github.com/JanMarvin/openxlsx2.\n\n\nChang, Winston. 2021. R6: Encapsulated Classes with Reference\nSemantics. https://CRAN.R-project.org/package=R6.\n\n\nDragulescu, Adrian, and Cole Arendt. 2023. Xlsx: Read, Write, Format\nExcel 2007 and Excel 97/2000/XP/2003 Files. https://CRAN.R-project.org/package=xlsx.\n\n\nEddelbuettel, Dirk, and Romain Fran√ßois. 2011. ‚ÄúRcpp:\nSeamless R and C++ Integration.‚Äù\nJournal of Statistical Software 40 (8): 1‚Äì18. https://doi.org/10.18637/jss.v040.i08.\n\n\nGarbuszus, Jan Marvin. 2023. Msoc: Encrypt and Decrypt of Office\nOpen Xml Files.\n\n\nGarmonsway, Duncan. 2022. Tidyxl: Read Untidy Excel Files. https://CRAN.R-project.org/package=tidyxl.\n\n\nGohel, David, and Panagiotis Skintzos. 2023. Flextable: Functions\nfor Tabular Reporting.\n\n\nHeidler, Tobias. 2023. Flexlsx: Exporting Flextables to Excel.\n\n\nKapoulkine, Arseny. 2006-2022. Pugixml. https://pugixml.org.\n\n\nOoms, Jeroen. 2023. Writexl: Export Data Frames to Excel ‚ÄôXlsx‚Äô\nFormat. https://CRAN.R-project.org/package=writexl.\n\n\nSchauberger, Philipp, and Alexander Walker. 2023. Openxlsx: Read,\nWrite and Edit Xlsx Files. https://CRAN.R-project.org/package=openxlsx.\n\n\nSchwartz, Marc. 2022. WriteXLS: Cross-Platform Perl Based r Function\nto Create Excel 2003 (XLS) and Excel 2007 (XLSX) Files. https://CRAN.R-project.org/package=WriteXLS.\n\n\nWickham, Hadley, and Jennifer Bryan. 2023. Readxl: Read Excel\nFiles. https://CRAN.R-project.org/package=readxl."
  }
]