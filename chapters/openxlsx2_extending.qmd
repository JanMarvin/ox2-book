---
title: "Extending `openxlsx2`"
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
set.seed(123)
```

```{r setup}
library(openxlsx2)
```

## `msoc` - Encrypting / Decrypting workbooks

You might want to look at `msoc` [@msoc] for openxml file level encryption/decryption.

```{r}
library(msoc)

xlsx <- temp_xlsx()

# let us write some worksheet
wb_workbook()$add_worksheet()$add_data(x = mtcars)$save(xlsx)

# now we can encrypt it
encrypt(xlsx, xlsx, pass = "msoc")

# the file is encrypted, we can not read it
try(wb <- wb_load(xlsx))

# we have to decrypt it first
decrypt(xlsx, xlsx, pass = "msoc")

# now we can load it again
wb_load(xlsx)$to_df() %>% head()
```

## `flexlsx` - Exporting `flextable` to workbooks

Using `flexlsx` [@flexlsx] you can extend `openxlsx2` to write `flextable` objects [@flextable] to spreadsheets. Various styling options are supported. A detailed description how to create flextables is given in the flextable book (a link is in the bibliography).

```{r}
#| output: false
library(flexlsx)

wb <- wb_workbook()$add_worksheet("mtcars", grid_lines = FALSE)

# Create a flextable and an openxlsx2 workbook
ft <- flextable::as_flextable(table(mtcars[2:5 , 1:2]))
ft

# add the flextable ft to the workbook, sheet "mtcars"
# offset the table to cell 'C2'
wb <- flexlsx::wb_add_flextable(wb, "mtcars", ft, dims = "C2")

if (interactive()) wb$open()
```

```{r echo=FALSE, warning=FALSE}
#| fig-cap: "The flextable written as xlsx file and as image"
knitr::include_graphics("../img/ex_flextable.png")
```


## `openxlsx2Extras` - Extending `openxlsx2`

Early in development, `openxlsx2Extras` [@openxlsx2Extras] allows extending various functions for user convenience or for features, that are more focused on working along `openxlsx2` and therefore are not necessary a requirement for the package itself.

One example (more can be found on the project github and pkgdown pages) is the following.

```{r}
library(openxlsx2)
library(openxlsx2Extras)

wb_new_workbook(
  title = "Workbook created with wb_new_workbook",
  sheet_names = c("First sheet", "Second sheet"),
  tab_color = c(wb_color("orange"), wb_color("yellow"))
)
```


## `ovbars` - Reading the `vbaProject.bin`

Another niche package is `ovbars` [@ovbars]. This package allows reading the binary blob that contains macros in `xlsm` and potentially `xlsb` files. The package allows extracting the VBA code.

```{r}
fl <- "https://github.com/JanMarvin/openxlsx-data/raw/refs/heads/main/gh_issue_416.xlsm"
wb <- openxlsx2::wb_load(fl)
vba <- wb$vbaProject

code <- ovbars::ovbar_out(name = vba)
message(code["Sheet1"])
```

